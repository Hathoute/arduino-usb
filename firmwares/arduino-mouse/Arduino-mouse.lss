
Arduino-mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000ee2  00000f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000098  0080010e  0080010e  00000f84  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044ed  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154c  00000000  00000000  00005719  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026ac  00000000  00000000  00006c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000778  00000000  00000000  00009314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bb2  00000000  00000000  00009a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028e3  00000000  00000000  0000b63e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a0  00000000  00000000  0000df21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a0 c0       	rjmp	.+320    	; 0x142 <__ctors_end>
   2:	00 00       	nop
   4:	b9 c0       	rjmp	.+370    	; 0x178 <__bad_interrupt>
   6:	00 00       	nop
   8:	b7 c0       	rjmp	.+366    	; 0x178 <__bad_interrupt>
   a:	00 00       	nop
   c:	b5 c0       	rjmp	.+362    	; 0x178 <__bad_interrupt>
   e:	00 00       	nop
  10:	b3 c0       	rjmp	.+358    	; 0x178 <__bad_interrupt>
  12:	00 00       	nop
  14:	b1 c0       	rjmp	.+354    	; 0x178 <__bad_interrupt>
  16:	00 00       	nop
  18:	af c0       	rjmp	.+350    	; 0x178 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ad c0       	rjmp	.+346    	; 0x178 <__bad_interrupt>
  1e:	00 00       	nop
  20:	ab c0       	rjmp	.+342    	; 0x178 <__bad_interrupt>
  22:	00 00       	nop
  24:	a9 c0       	rjmp	.+338    	; 0x178 <__bad_interrupt>
  26:	00 00       	nop
  28:	a7 c0       	rjmp	.+334    	; 0x178 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	ab c3       	rjmp	.+1878   	; 0x784 <__vector_11>
  2e:	00 00       	nop
  30:	a3 c0       	rjmp	.+326    	; 0x178 <__bad_interrupt>
  32:	00 00       	nop
  34:	a1 c0       	rjmp	.+322    	; 0x178 <__bad_interrupt>
  36:	00 00       	nop
  38:	9f c0       	rjmp	.+318    	; 0x178 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9d c0       	rjmp	.+314    	; 0x178 <__bad_interrupt>
  3e:	00 00       	nop
  40:	9b c0       	rjmp	.+310    	; 0x178 <__bad_interrupt>
  42:	00 00       	nop
  44:	99 c0       	rjmp	.+306    	; 0x178 <__bad_interrupt>
  46:	00 00       	nop
  48:	97 c0       	rjmp	.+302    	; 0x178 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	95 c0       	rjmp	.+298    	; 0x178 <__bad_interrupt>
  4e:	00 00       	nop
  50:	93 c0       	rjmp	.+294    	; 0x178 <__bad_interrupt>
  52:	00 00       	nop
  54:	91 c0       	rjmp	.+290    	; 0x178 <__bad_interrupt>
  56:	00 00       	nop
  58:	8f c0       	rjmp	.+286    	; 0x178 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	41 c1       	rjmp	.+642    	; 0x2e0 <__vector_23>
  5e:	00 00       	nop
  60:	8b c0       	rjmp	.+278    	; 0x178 <__bad_interrupt>
  62:	00 00       	nop
  64:	89 c0       	rjmp	.+274    	; 0x178 <__bad_interrupt>
  66:	00 00       	nop
  68:	87 c0       	rjmp	.+270    	; 0x178 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	85 c0       	rjmp	.+266    	; 0x178 <__bad_interrupt>
  6e:	00 00       	nop
  70:	83 c0       	rjmp	.+262    	; 0x178 <__bad_interrupt>
  72:	00 00       	nop
  74:	82 04       	cpc	r8, r2
  76:	9e 04       	cpc	r9, r14
  78:	50 05       	cpc	r21, r0
  7a:	9e 04       	cpc	r9, r14
  7c:	50 05       	cpc	r21, r0
  7e:	d6 04       	cpc	r13, r6
  80:	f3 04       	cpc	r15, r3
  82:	50 05       	cpc	r21, r0
  84:	13 05       	cpc	r17, r3
  86:	25 05       	cpc	r18, r5

00000088 <ProductString>:
  88:	1a 03 47 00 35 00 30 00 32 00 20 00 48 00 45 00     ..G.5.0.2. .H.E.
  98:	52 00 4f 00 20 00 53 00 45 00 00 00                 R.O. .S.E...

000000a4 <ManufacturerString>:
  a4:	10 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
  b4:	00 00                                               ..

000000b6 <LanguageString>:
  b6:	04 03 09 04                                         ....

000000ba <ConfigurationDescriptor>:
  ba:	09 02 3b 00 02 01 00 a0 96 09 04 01 00 01 03 00     ..;.............
  ca:	00 00 09 21 11 01 00 01 22 97 00 07 05 82 03 14     ...!....".......
  da:	00 01 09 04 00 00 01 03 01 02 00 09 21 11 01 00     ............!...
  ea:	01 22 3a 00 07 05 81 03 08 00 01                    .":........

000000f5 <DeviceDescriptor>:
  f5:	12 01 10 01 00 00 00 08 6d 04 8b c0 03 27 01 02     ........m....'..
 105:	03 01                                               ..

00000107 <MouseReport>:
 107:	05 01 09 02 a1 01 09 01 a1 00 95 03 75 01 05 09     ............u...
 117:	19 01 29 03 15 00 25 01 81 02 95 01 75 05 81 01     ..)...%.....u...
 127:	75 08 95 02 05 01 09 30 09 31 15 81 25 7f 81 06     u......0.1..%...
 137:	75 08 95 01 09 38 81 06 c0 c0 00                    u....8.....

00000142 <__ctors_end>:
 142:	11 24       	eor	r1, r1
 144:	1f be       	out	0x3f, r1	; 63
 146:	cf ef       	ldi	r28, 0xFF	; 255
 148:	d2 e0       	ldi	r29, 0x02	; 2
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	cd bf       	out	0x3d, r28	; 61

0000014e <__do_copy_data>:
 14e:	11 e0       	ldi	r17, 0x01	; 1
 150:	a0 e0       	ldi	r26, 0x00	; 0
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	e2 ee       	ldi	r30, 0xE2	; 226
 156:	fe e0       	ldi	r31, 0x0E	; 14
 158:	02 c0       	rjmp	.+4      	; 0x15e <__do_copy_data+0x10>
 15a:	05 90       	lpm	r0, Z+
 15c:	0d 92       	st	X+, r0
 15e:	ae 30       	cpi	r26, 0x0E	; 14
 160:	b1 07       	cpc	r27, r17
 162:	d9 f7       	brne	.-10     	; 0x15a <__do_copy_data+0xc>

00000164 <__do_clear_bss>:
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	ae e0       	ldi	r26, 0x0E	; 14
 168:	b1 e0       	ldi	r27, 0x01	; 1
 16a:	01 c0       	rjmp	.+2      	; 0x16e <.do_clear_bss_start>

0000016c <.do_clear_bss_loop>:
 16c:	1d 92       	st	X+, r1

0000016e <.do_clear_bss_start>:
 16e:	a6 3a       	cpi	r26, 0xA6	; 166
 170:	b2 07       	cpc	r27, r18
 172:	e1 f7       	brne	.-8      	; 0x16c <.do_clear_bss_loop>
 174:	2b d0       	rcall	.+86     	; 0x1cc <main>
 176:	b3 c6       	rjmp	.+3430   	; 0xede <_exit>

00000178 <__bad_interrupt>:
 178:	43 cf       	rjmp	.-378    	; 0x0 <__vectors>

0000017a <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 17e:	84 b7       	in	r24, 0x34	; 52
 180:	87 7f       	andi	r24, 0xF7	; 247
 182:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	a8 95       	wdr
 18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 18e:	88 61       	ori	r24, 0x18	; 24
 190:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 194:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 198:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 19a:	8c e0       	ldi	r24, 0x0C	; 12
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
 1a2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 1ac:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1b0:	c9 ec       	ldi	r28, 0xC9	; 201
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	88 e1       	ldi	r24, 0x18	; 24
 1b6:	88 83       	st	Y, r24
				
				DDRD  |= (1 << 3);
 1b8:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 1ba:	5a 9a       	sbi	0x0b, 2	; 11
	wdt_disable();

	/* Hardware Initialization */
	Serial_Init(76800, false);
	USB_Init();
 1bc:	d8 d2       	rcall	.+1456   	; 0x76e <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 1be:	84 e0       	ldi	r24, 0x04	; 4
 1c0:	85 bd       	out	0x25, r24	; 37
	
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 1c2:	88 e9       	ldi	r24, 0x98	; 152
 1c4:	88 83       	st	Y, r24
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	00 d0       	rcall	.+0      	; 0x1d2 <main+0x6>
 1d2:	00 d0       	rcall	.+0      	; 0x1d4 <main+0x8>
 1d4:	cd b7       	in	r28, 0x3d	; 61
 1d6:	de b7       	in	r29, 0x3e	; 62
	USB_MouseReport_Data_t newReport;
	int ind;

	SetupHardware();
 1d8:	d0 df       	rcall	.-96     	; 0x17a <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1da:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1dc:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 1de:	87 e1       	ldi	r24, 0x17	; 23
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <USARTtoUSB_Buffer+0x81>
 1e6:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <USARTtoUSB_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
 1ea:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <USARTtoUSB_Buffer+0x83>
 1ee:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <USARTtoUSB_Buffer+0x82>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1f2:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

	sei();
 1f4:	78 94       	sei
 1f6:	8e 01       	movw	r16, r28
 1f8:	0b 5f       	subi	r16, 0xFB	; 251
 1fa:	1f 4f       	sbci	r17, 0xFF	; 255
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 1fc:	7c 01       	movw	r14, r24
	    if (BufferCount >= 4) {
			for (ind=0; ind<4; ind++) {
				((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
			}

			isNewReport = true;
 1fe:	dd 24       	eor	r13, r13
 200:	d3 94       	inc	r13
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 202:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 204:	f8 94       	cli
			{
				Count = Buffer->Count;
 206:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USARTtoUSB_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 20a:	9f bf       	out	0x3f, r25	; 63
	sei();

	for (;;) {
	    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	    if (BufferCount >= 4) {
 20c:	84 30       	cpi	r24, 0x04	; 4
 20e:	60 f1       	brcs	.+88     	; 0x268 <main+0x9c>
 210:	de 01       	movw	r26, r28
 212:	11 96       	adiw	r26, 0x01	; 1
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 214:	e0 91 99 01 	lds	r30, 0x0199	; 0x800199 <USARTtoUSB_Buffer+0x82>
 218:	f0 91 9a 01 	lds	r31, 0x019A	; 0x80019a <USARTtoUSB_Buffer+0x83>
 21c:	91 91       	ld	r25, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 21e:	f0 93 9a 01 	sts	0x019A, r31	; 0x80019a <USARTtoUSB_Buffer+0x83>
 222:	e0 93 99 01 	sts	0x0199, r30	; 0x800199 <USARTtoUSB_Buffer+0x82>
 226:	e7 59       	subi	r30, 0x97	; 151
 228:	f1 40       	sbci	r31, 0x01	; 1
 22a:	21 f4       	brne	.+8      	; 0x234 <main+0x68>
			  Buffer->Out = Buffer->Buffer;
 22c:	f0 92 9a 01 	sts	0x019A, r15	; 0x80019a <USARTtoUSB_Buffer+0x83>
 230:	e0 92 99 01 	sts	0x0199, r14	; 0x800199 <USARTtoUSB_Buffer+0x82>

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 234:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 236:	f8 94       	cli
			{
				Buffer->Count--;
 238:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USARTtoUSB_Buffer+0x84>
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USARTtoUSB_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 242:	2f bf       	out	0x3f, r18	; 63
			for (ind=0; ind<4; ind++) {
				((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 244:	9d 93       	st	X+, r25

	for (;;) {
	    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	    if (BufferCount >= 4) {
			for (ind=0; ind<4; ind++) {
 246:	a0 17       	cp	r26, r16
 248:	b1 07       	cpc	r27, r17
 24a:	21 f7       	brne	.-56     	; 0x214 <main+0x48>
				((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
			}

			isNewReport = true;
 24c:	d0 92 0e 01 	sts	0x010E, r13	; 0x80010e <__data_end>

			mouseReport.Button = newReport.Button;
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mouseReport>
			mouseReport.X = newReport.X;
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <mouseReport+0x1>
			mouseReport.Y = newReport.Y;
 25c:	8b 81       	ldd	r24, Y+3	; 0x03
 25e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <mouseReport+0x2>
			mouseReport.Wheel = newReport.Wheel;
 262:	8c 81       	ldd	r24, Y+4	; 0x04
 264:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <mouseReport+0x3>
	    }

	    HID_Device_USBTask(&Mouse_HID_Interface);
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	91 e0       	ldi	r25, 0x01	; 1
	    USB_USBTask();
 26c:	70 d5       	rcall	.+2784   	; 0xd4e <HID_Device_USBTask>
 26e:	21 d4       	rcall	.+2114   	; 0xab2 <USB_USBTask>
	}
 270:	c8 cf       	rjmp	.-112    	; 0x202 <main+0x36>

00000272 <EVENT_USB_Device_Connect>:
 272:	08 95       	ret

00000274 <EVENT_USB_Device_Disconnect>:
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 274:	08 95       	ret

00000276 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	47 d5       	rcall	.+2702   	; 0xd0a <HID_Device_ConfigureEndpoints>
			 *  at the start of each USB frame when enumerated in device mode.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB_INT_Enable(USB_INT_SOFI);
 27c:	e2 ee       	ldi	r30, 0xE2	; 226
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	84 60       	ori	r24, 0x04	; 4
 284:	80 83       	st	Z, r24
 286:	08 95       	ret

00000288 <EVENT_USB_Device_UnhandledControlRequest>:
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	23 c4       	rjmp	.+2118   	; 0xad4 <HID_Device_ProcessControlRequest>

0000028e <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 28e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Mouse_HID_Interface+0xb>
 292:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Mouse_HID_Interface+0xc>
 296:	00 97       	sbiw	r24, 0x00	; 0
 298:	29 f0       	breq	.+10     	; 0x2a4 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <Mouse_HID_Interface+0xc>
 2a0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Mouse_HID_Interface+0xb>
 2a4:	08 95       	ret

000002a6 <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    uint8_t* const ReportID,
    const uint8_t ReportType,
    void* ReportData,
    uint16_t* const ReportSize)
{
 2a6:	0f 93       	push	r16
 2a8:	1f 93       	push	r17
	USB_MouseReport_Data_t* reportp = (USB_MouseReport_Data_t*)ReportData;

	*reportp = mouseReport;
 2aa:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <mouseReport>
 2ae:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <mouseReport+0x1>
 2b2:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <mouseReport+0x2>
 2b6:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <mouseReport+0x3>
 2ba:	f9 01       	movw	r30, r18
 2bc:	80 83       	st	Z, r24
 2be:	91 83       	std	Z+1, r25	; 0x01
 2c0:	a2 83       	std	Z+2, r26	; 0x02
 2c2:	b3 83       	std	Z+3, r27	; 0x03

	*ReportSize = sizeof(USB_MouseReport_Data_t);
 2c4:	84 e0       	ldi	r24, 0x04	; 4
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	f8 01       	movw	r30, r16
 2ca:	91 83       	std	Z+1, r25	; 0x01
 2cc:	80 83       	st	Z, r24
	
	if (isNewReport) {
 2ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2d2:	81 11       	cpse	r24, r1
		isNewReport = false;
 2d4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		return true;
	}

	return false;		
}
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	08 95       	ret

000002de <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
 2de:	08 95       	ret

000002e0 <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	2f 93       	push	r18
 2ec:	8f 93       	push	r24
 2ee:	9f 93       	push	r25
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 2f4:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>

	if (USB_DeviceState == DEVICE_STATE_Configured)
 2f8:	9e b3       	in	r25, 0x1e	; 30
 2fa:	94 30       	cpi	r25, 0x04	; 4
 2fc:	f1 f4       	brne	.+60     	; 0x33a <__stack+0x3b>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 2fe:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <USARTtoUSB_Buffer+0x80>
 302:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <USARTtoUSB_Buffer+0x81>
 306:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 308:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <USARTtoUSB_Buffer+0x80>
 30c:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <USARTtoUSB_Buffer+0x81>
 310:	cf 01       	movw	r24, r30
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <USARTtoUSB_Buffer+0x81>
 318:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <USARTtoUSB_Buffer+0x80>
 31c:	87 59       	subi	r24, 0x97	; 151
 31e:	91 40       	sbci	r25, 0x01	; 1
 320:	21 f4       	brne	.+8      	; 0x32a <__stack+0x2b>
			  Buffer->In = Buffer->Buffer;
 322:	87 e1       	ldi	r24, 0x17	; 23
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	92 83       	std	Z+2, r25	; 0x02
 328:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 32a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 32c:	f8 94       	cli
			{
				Buffer->Count++;
 32e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USARTtoUSB_Buffer+0x84>
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <USARTtoUSB_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 338:	9f bf       	out	0x3f, r25	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	9f 91       	pop	r25
 340:	8f 91       	pop	r24
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 34e:	29 2f       	mov	r18, r25
 350:	33 27       	eor	r19, r19
 352:	23 30       	cpi	r18, 0x03	; 3
 354:	31 05       	cpc	r19, r1
 356:	e1 f0       	breq	.+56     	; 0x390 <CALLBACK_USB_GetDescriptor+0x42>
 358:	58 f4       	brcc	.+22     	; 0x370 <CALLBACK_USB_GetDescriptor+0x22>
 35a:	21 30       	cpi	r18, 0x01	; 1
 35c:	31 05       	cpc	r19, r1
 35e:	99 f0       	breq	.+38     	; 0x386 <CALLBACK_USB_GetDescriptor+0x38>
 360:	22 30       	cpi	r18, 0x02	; 2
 362:	31 05       	cpc	r19, r1
 364:	69 f5       	brne	.+90     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 366:	8b e3       	ldi	r24, 0x3B	; 59
 368:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
 36a:	2a eb       	ldi	r18, 0xBA	; 186
 36c:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 36e:	2c c0       	rjmp	.+88     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 370:	21 32       	cpi	r18, 0x21	; 33
 372:	31 05       	cpc	r19, r1
 374:	01 f1       	breq	.+64     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x68>
 376:	22 32       	cpi	r18, 0x22	; 34
 378:	31 05       	cpc	r19, r1
 37a:	11 f5       	brne	.+68     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&MouseReport;
			Size    = sizeof(MouseReport);
 37c:	8a e3       	ldi	r24, 0x3A	; 58
 37e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&MouseReport;
 380:	27 e0       	ldi	r18, 0x07	; 7
 382:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
 384:	21 c0       	rjmp	.+66     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 386:	82 e1       	ldi	r24, 0x12	; 18
 388:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
 38a:	25 ef       	ldi	r18, 0xF5	; 245
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	1c c0       	rjmp	.+56     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 390:	99 27       	eor	r25, r25
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	91 05       	cpc	r25, r1
 396:	49 f0       	breq	.+18     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x5c>
 398:	28 f0       	brcs	.+10     	; 0x3a4 <CALLBACK_USB_GetDescriptor+0x56>
 39a:	02 97       	sbiw	r24, 0x02	; 2
 39c:	89 f4       	brne	.+34     	; 0x3c0 <CALLBACK_USB_GetDescriptor+0x72>
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 39e:	e8 e8       	ldi	r30, 0x88	; 136
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	05 c0       	rjmp	.+10     	; 0x3ae <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3a4:	e6 eb       	ldi	r30, 0xB6	; 182
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3aa:	e4 ea       	ldi	r30, 0xA4	; 164
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3ae:	84 91       	lpm	r24, Z
 3b0:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = (void*)&ProductString;
 3b2:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3b4:	09 c0       	rjmp	.+18     	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x7a>
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_t);
 3b6:	89 e0       	ldi	r24, 0x09	; 9
 3b8:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
 3ba:	2c ec       	ldi	r18, 0xCC	; 204
 3bc:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}
	
	*DescriptorAddress = Address;		
 3c8:	fa 01       	movw	r30, r20
 3ca:	31 83       	std	Z+1, r19	; 0x01
 3cc:	20 83       	st	Z, r18
	return Size;
}
 3ce:	08 95       	ret

000003d0 <Endpoint_BytesToEPSizeMaskDynamic>:
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 3d0:	ac 01       	movw	r20, r24
 3d2:	28 e0       	ldi	r18, 0x08	; 8
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	24 17       	cp	r18, r20
 3da:	35 07       	cpc	r19, r21
 3dc:	20 f4       	brcc	.+8      	; 0x3e6 <Endpoint_BytesToEPSizeMaskDynamic+0x16>
 3de:	8f 5f       	subi	r24, 0xFF	; 255
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	f9 cf       	rjmp	.-14     	; 0x3d8 <Endpoint_BytesToEPSizeMaskDynamic+0x8>
 3e6:	82 95       	swap	r24
 3e8:	80 7f       	andi	r24, 0xF0	; 240
 3ea:	08 95       	ret

000003ec <Endpoint_ConfigureEndpoint_Prv>:
 3ec:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 3f0:	eb ee       	ldi	r30, 0xEB	; 235
 3f2:	f0 e0       	ldi	r31, 0x00	; 0
 3f4:	80 81       	ld	r24, Z
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	80 83       	st	Z, r24
 3fa:	ed ee       	ldi	r30, 0xED	; 237
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	10 82       	st	Z, r1
 400:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 404:	40 83       	st	Z, r20
 406:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 40a:	88 1f       	adc	r24, r24
 40c:	88 27       	eor	r24, r24
 40e:	88 1f       	adc	r24, r24
 410:	08 95       	ret

00000412 <Endpoint_ClearEndpoints>:
 412:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 41c:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 420:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 424:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 428:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 42c:	9e 7f       	andi	r25, 0xFE	; 254
 42e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 432:	8f 5f       	subi	r24, 0xFF	; 255
 434:	85 30       	cpi	r24, 0x05	; 5
 436:	81 f7       	brne	.-32     	; 0x418 <Endpoint_ClearEndpoints+0x6>
 438:	08 95       	ret

0000043a <Endpoint_ClearStatusStage>:
 43a:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
 43e:	87 ff       	sbrs	r24, 7
 440:	0f c0       	rjmp	.+30     	; 0x460 <Endpoint_ClearStatusStage+0x26>
 442:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 446:	82 fd       	sbrc	r24, 2
 448:	04 c0       	rjmp	.+8      	; 0x452 <Endpoint_ClearStatusStage+0x18>
 44a:	8e b3       	in	r24, 0x1e	; 30
 44c:	81 11       	cpse	r24, r1
 44e:	f9 cf       	rjmp	.-14     	; 0x442 <Endpoint_ClearStatusStage+0x8>
 450:	10 c0       	rjmp	.+32     	; 0x472 <Endpoint_ClearStatusStage+0x38>
 452:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 456:	8b 77       	andi	r24, 0x7B	; 123
 458:	0a c0       	rjmp	.+20     	; 0x46e <Endpoint_ClearStatusStage+0x34>
 45a:	8e b3       	in	r24, 0x1e	; 30
 45c:	88 23       	and	r24, r24
 45e:	49 f0       	breq	.+18     	; 0x472 <Endpoint_ClearStatusStage+0x38>
 460:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 464:	80 ff       	sbrs	r24, 0
 466:	f9 cf       	rjmp	.-14     	; 0x45a <Endpoint_ClearStatusStage+0x20>
 468:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 46c:	8e 77       	andi	r24, 0x7E	; 126
 46e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 472:	08 95       	ret

00000474 <Endpoint_WaitUntilReady>:
 474:	85 e6       	ldi	r24, 0x65	; 101
 476:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 47a:	90 ff       	sbrs	r25, 0
 47c:	05 c0       	rjmp	.+10     	; 0x488 <Endpoint_WaitUntilReady+0x14>
 47e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 482:	90 ff       	sbrs	r25, 0
 484:	05 c0       	rjmp	.+10     	; 0x490 <Endpoint_WaitUntilReady+0x1c>
 486:	1b c0       	rjmp	.+54     	; 0x4be <Endpoint_WaitUntilReady+0x4a>
 488:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 48c:	92 fd       	sbrc	r25, 2
 48e:	17 c0       	rjmp	.+46     	; 0x4be <Endpoint_WaitUntilReady+0x4a>
 490:	9e b3       	in	r25, 0x1e	; 30
 492:	99 23       	and	r25, r25
 494:	b1 f0       	breq	.+44     	; 0x4c2 <Endpoint_WaitUntilReady+0x4e>
 496:	9e b3       	in	r25, 0x1e	; 30
 498:	95 30       	cpi	r25, 0x05	; 5
 49a:	a9 f0       	breq	.+42     	; 0x4c6 <Endpoint_WaitUntilReady+0x52>
 49c:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 4a0:	95 fd       	sbrc	r25, 5
 4a2:	13 c0       	rjmp	.+38     	; 0x4ca <Endpoint_WaitUntilReady+0x56>
 4a4:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 4a8:	92 ff       	sbrs	r25, 2
 4aa:	e5 cf       	rjmp	.-54     	; 0x476 <Endpoint_WaitUntilReady+0x2>
 4ac:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 4b0:	9b 7f       	andi	r25, 0xFB	; 251
 4b2:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 4b6:	81 50       	subi	r24, 0x01	; 1
 4b8:	f1 f6       	brne	.-68     	; 0x476 <Endpoint_WaitUntilReady+0x2>
 4ba:	84 e0       	ldi	r24, 0x04	; 4
 4bc:	08 95       	ret
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	08 95       	ret
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	08 95       	ret
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	08 95       	ret

000004ce <Endpoint_Write_Stream_LE>:
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	8c 01       	movw	r16, r24
 4dc:	eb 01       	movw	r28, r22
 4de:	7a 01       	movw	r14, r20
 4e0:	c9 df       	rcall	.-110    	; 0x474 <Endpoint_WaitUntilReady>
 4e2:	81 11       	cpse	r24, r1
 4e4:	1d c0       	rjmp	.+58     	; 0x520 <Endpoint_Write_Stream_LE+0x52>
 4e6:	20 97       	sbiw	r28, 0x00	; 0
 4e8:	d1 f0       	breq	.+52     	; 0x51e <Endpoint_Write_Stream_LE+0x50>
 4ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4ee:	85 fd       	sbrc	r24, 5
 4f0:	0e c0       	rjmp	.+28     	; 0x50e <Endpoint_Write_Stream_LE+0x40>
 4f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4f6:	8e 77       	andi	r24, 0x7E	; 126
 4f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4fc:	e1 14       	cp	r14, r1
 4fe:	f1 04       	cpc	r15, r1
 500:	79 f3       	breq	.-34     	; 0x4e0 <Endpoint_Write_Stream_LE+0x12>
 502:	f7 01       	movw	r30, r14
 504:	09 95       	icall
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	59 f7       	brne	.-42     	; 0x4e0 <Endpoint_Write_Stream_LE+0x12>
 50a:	85 e0       	ldi	r24, 0x05	; 5
 50c:	09 c0       	rjmp	.+18     	; 0x520 <Endpoint_Write_Stream_LE+0x52>
 50e:	f8 01       	movw	r30, r16
 510:	80 81       	ld	r24, Z
 512:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 516:	21 97       	sbiw	r28, 0x01	; 1
 518:	0f 5f       	subi	r16, 0xFF	; 255
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	e4 cf       	rjmp	.-56     	; 0x4e6 <Endpoint_Write_Stream_LE+0x18>
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	ff 90       	pop	r15
 52a:	ef 90       	pop	r14
 52c:	08 95       	ret

0000052e <Endpoint_Write_Control_Stream_LE>:
 52e:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x6>
 532:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <USB_ControlRequest+0x7>
 536:	26 17       	cp	r18, r22
 538:	37 07       	cpc	r19, r23
 53a:	48 f0       	brcs	.+18     	; 0x54e <Endpoint_Write_Control_Stream_LE+0x20>
 53c:	61 15       	cp	r22, r1
 53e:	71 05       	cpc	r23, r1
 540:	39 f4       	brne	.+14     	; 0x550 <Endpoint_Write_Control_Stream_LE+0x22>
 542:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 546:	2e 77       	andi	r18, 0x7E	; 126
 548:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 54c:	01 c0       	rjmp	.+2      	; 0x550 <Endpoint_Write_Control_Stream_LE+0x22>
 54e:	b9 01       	movw	r22, r18
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	61 15       	cp	r22, r1
 554:	71 05       	cpc	r23, r1
 556:	61 f1       	breq	.+88     	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0x82>
 558:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 55c:	23 fd       	sbrc	r18, 3
 55e:	37 c0       	rjmp	.+110    	; 0x5ce <Endpoint_Write_Control_Stream_LE+0xa0>
 560:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 564:	22 fd       	sbrc	r18, 2
 566:	2d c0       	rjmp	.+90     	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0x94>
 568:	2e b3       	in	r18, 0x1e	; 30
 56a:	22 23       	and	r18, r18
 56c:	91 f1       	breq	.+100    	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0xa4>
 56e:	2e b3       	in	r18, 0x1e	; 30
 570:	25 30       	cpi	r18, 0x05	; 5
 572:	89 f1       	breq	.+98     	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0xa8>
 574:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 578:	20 ff       	sbrs	r18, 0
 57a:	eb cf       	rjmp	.-42     	; 0x552 <Endpoint_Write_Control_Stream_LE+0x24>
 57c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 580:	fc 01       	movw	r30, r24
 582:	cf 01       	movw	r24, r30
 584:	61 15       	cp	r22, r1
 586:	71 05       	cpc	r23, r1
 588:	49 f0       	breq	.+18     	; 0x59c <Endpoint_Write_Control_Stream_LE+0x6e>
 58a:	28 30       	cpi	r18, 0x08	; 8
 58c:	38 f4       	brcc	.+14     	; 0x59c <Endpoint_Write_Control_Stream_LE+0x6e>
 58e:	81 91       	ld	r24, Z+
 590:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 594:	61 50       	subi	r22, 0x01	; 1
 596:	71 09       	sbc	r23, r1
 598:	2f 5f       	subi	r18, 0xFF	; 255
 59a:	f3 cf       	rjmp	.-26     	; 0x582 <Endpoint_Write_Control_Stream_LE+0x54>
 59c:	31 e0       	ldi	r19, 0x01	; 1
 59e:	28 30       	cpi	r18, 0x08	; 8
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <Endpoint_Write_Control_Stream_LE+0x76>
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5a8:	2e 77       	andi	r18, 0x7E	; 126
 5aa:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5ae:	d1 cf       	rjmp	.-94     	; 0x552 <Endpoint_Write_Control_Stream_LE+0x24>
 5b0:	31 11       	cpse	r19, r1
 5b2:	d2 cf       	rjmp	.-92     	; 0x558 <Endpoint_Write_Control_Stream_LE+0x2a>
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0x94>
 5b6:	8e b3       	in	r24, 0x1e	; 30
 5b8:	88 23       	and	r24, r24
 5ba:	59 f0       	breq	.+22     	; 0x5d2 <Endpoint_Write_Control_Stream_LE+0xa4>
 5bc:	8e b3       	in	r24, 0x1e	; 30
 5be:	85 30       	cpi	r24, 0x05	; 5
 5c0:	51 f0       	breq	.+20     	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0xa8>
 5c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5c6:	82 ff       	sbrs	r24, 2
 5c8:	f6 cf       	rjmp	.-20     	; 0x5b6 <Endpoint_Write_Control_Stream_LE+0x88>
 5ca:	80 e0       	ldi	r24, 0x00	; 0
 5cc:	08 95       	ret
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	08 95       	ret
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	08 95       	ret
 5d6:	83 e0       	ldi	r24, 0x03	; 3
 5d8:	08 95       	ret

000005da <Endpoint_Write_Control_PStream_LE>:
 5da:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x6>
 5de:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <USB_ControlRequest+0x7>
 5e2:	26 17       	cp	r18, r22
 5e4:	37 07       	cpc	r19, r23
 5e6:	48 f0       	brcs	.+18     	; 0x5fa <Endpoint_Write_Control_PStream_LE+0x20>
 5e8:	61 15       	cp	r22, r1
 5ea:	71 05       	cpc	r23, r1
 5ec:	39 f4       	brne	.+14     	; 0x5fc <Endpoint_Write_Control_PStream_LE+0x22>
 5ee:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5f2:	2e 77       	andi	r18, 0x7E	; 126
 5f4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <Endpoint_Write_Control_PStream_LE+0x22>
 5fa:	b9 01       	movw	r22, r18
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	61 15       	cp	r22, r1
 600:	71 05       	cpc	r23, r1
 602:	69 f1       	breq	.+90     	; 0x65e <Endpoint_Write_Control_PStream_LE+0x84>
 604:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 608:	23 fd       	sbrc	r18, 3
 60a:	38 c0       	rjmp	.+112    	; 0x67c <Endpoint_Write_Control_PStream_LE+0xa2>
 60c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 610:	22 fd       	sbrc	r18, 2
 612:	2e c0       	rjmp	.+92     	; 0x670 <Endpoint_Write_Control_PStream_LE+0x96>
 614:	2e b3       	in	r18, 0x1e	; 30
 616:	22 23       	and	r18, r18
 618:	99 f1       	breq	.+102    	; 0x680 <Endpoint_Write_Control_PStream_LE+0xa6>
 61a:	2e b3       	in	r18, 0x1e	; 30
 61c:	25 30       	cpi	r18, 0x05	; 5
 61e:	91 f1       	breq	.+100    	; 0x684 <Endpoint_Write_Control_PStream_LE+0xaa>
 620:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 624:	20 ff       	sbrs	r18, 0
 626:	eb cf       	rjmp	.-42     	; 0x5fe <Endpoint_Write_Control_PStream_LE+0x24>
 628:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 62c:	fc 01       	movw	r30, r24
 62e:	cf 01       	movw	r24, r30
 630:	61 15       	cp	r22, r1
 632:	71 05       	cpc	r23, r1
 634:	51 f0       	breq	.+20     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x70>
 636:	28 30       	cpi	r18, 0x08	; 8
 638:	40 f4       	brcc	.+16     	; 0x64a <Endpoint_Write_Control_PStream_LE+0x70>
 63a:	84 91       	lpm	r24, Z
 63c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 640:	61 50       	subi	r22, 0x01	; 1
 642:	71 09       	sbc	r23, r1
 644:	2f 5f       	subi	r18, 0xFF	; 255
 646:	31 96       	adiw	r30, 0x01	; 1
 648:	f2 cf       	rjmp	.-28     	; 0x62e <Endpoint_Write_Control_PStream_LE+0x54>
 64a:	31 e0       	ldi	r19, 0x01	; 1
 64c:	28 30       	cpi	r18, 0x08	; 8
 64e:	09 f0       	breq	.+2      	; 0x652 <Endpoint_Write_Control_PStream_LE+0x78>
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 656:	2e 77       	andi	r18, 0x7E	; 126
 658:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 65c:	d0 cf       	rjmp	.-96     	; 0x5fe <Endpoint_Write_Control_PStream_LE+0x24>
 65e:	31 11       	cpse	r19, r1
 660:	d1 cf       	rjmp	.-94     	; 0x604 <Endpoint_Write_Control_PStream_LE+0x2a>
 662:	06 c0       	rjmp	.+12     	; 0x670 <Endpoint_Write_Control_PStream_LE+0x96>
 664:	8e b3       	in	r24, 0x1e	; 30
 666:	88 23       	and	r24, r24
 668:	59 f0       	breq	.+22     	; 0x680 <Endpoint_Write_Control_PStream_LE+0xa6>
 66a:	8e b3       	in	r24, 0x1e	; 30
 66c:	85 30       	cpi	r24, 0x05	; 5
 66e:	51 f0       	breq	.+20     	; 0x684 <Endpoint_Write_Control_PStream_LE+0xaa>
 670:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 674:	82 ff       	sbrs	r24, 2
 676:	f6 cf       	rjmp	.-20     	; 0x664 <Endpoint_Write_Control_PStream_LE+0x8a>
 678:	80 e0       	ldi	r24, 0x00	; 0
 67a:	08 95       	ret
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	08 95       	ret
 680:	82 e0       	ldi	r24, 0x02	; 2
 682:	08 95       	ret
 684:	83 e0       	ldi	r24, 0x03	; 3
 686:	08 95       	ret

00000688 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 688:	61 15       	cp	r22, r1
 68a:	71 05       	cpc	r23, r1
 68c:	29 f4       	brne	.+10     	; 0x698 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 68e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 692:	2b 77       	andi	r18, 0x7B	; 123
 694:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	  Endpoint_ClearOUT();
	
	while (Length)
 698:	61 15       	cp	r22, r1
 69a:	71 05       	cpc	r23, r1
 69c:	11 f1       	breq	.+68     	; 0x6e2 <Endpoint_Read_Control_Stream_LE+0x5a>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 69e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		if (Endpoint_IsSETUPReceived())
 6a2:	23 fd       	sbrc	r18, 3
 6a4:	24 c0       	rjmp	.+72     	; 0x6ee <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6a6:	2e b3       	in	r18, 0x1e	; 30
 6a8:	22 23       	and	r18, r18
 6aa:	19 f1       	breq	.+70     	; 0x6f2 <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6ac:	2e b3       	in	r18, 0x1e	; 30
 6ae:	25 30       	cpi	r18, 0x05	; 5
 6b0:	11 f1       	breq	.+68     	; 0x6f6 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6b2:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 6b6:	22 ff       	sbrs	r18, 2
 6b8:	ef cf       	rjmp	.-34     	; 0x698 <Endpoint_Read_Control_Stream_LE+0x10>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 6ba:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		{
			while (Length && Endpoint_BytesInEndpoint())
 6be:	22 23       	and	r18, r18
 6c0:	31 f3       	breq	.-52     	; 0x68e <Endpoint_Read_Control_Stream_LE+0x6>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6c2:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 6c4:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 6c8:	fc 01       	movw	r30, r24
 6ca:	31 97       	sbiw	r30, 0x01	; 1
 6cc:	20 83       	st	Z, r18
				Length--;
 6ce:	61 50       	subi	r22, 0x01	; 1
 6d0:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 6d2:	99 f7       	brne	.-26     	; 0x6ba <Endpoint_Read_Control_Stream_LE+0x32>
 6d4:	dc cf       	rjmp	.-72     	; 0x68e <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6d6:	8e b3       	in	r24, 0x1e	; 30
 6d8:	88 23       	and	r24, r24
 6da:	59 f0       	breq	.+22     	; 0x6f2 <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6dc:	8e b3       	in	r24, 0x1e	; 30
 6de:	85 30       	cpi	r24, 0x05	; 5
 6e0:	51 f0       	breq	.+20     	; 0x6f6 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 6e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 6e6:	80 ff       	sbrs	r24, 0
 6e8:	f6 cf       	rjmp	.-20     	; 0x6d6 <Endpoint_Read_Control_Stream_LE+0x4e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	08 95       	ret

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6f2:	82 e0       	ldi	r24, 0x02	; 2
 6f4:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6f6:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 6f8:	08 95       	ret

000006fa <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 6fa:	3e d0       	rcall	.+124    	; 0x778 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6fc:	40 d0       	rcall	.+128    	; 0x77e <USB_INT_ClearAllInterrupts>
 6fe:	1e ba       	out	0x1e, r1	; 30
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
 700:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <USB_ConfigurationNumber>
	USB_ConfigurationNumber  = 0;
 704:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 706:	89 bd       	out	0x29, r24	; 41
 708:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 70a:	82 60       	ori	r24, 0x02	; 2
 70c:	89 bd       	out	0x29, r24	; 41
 70e:	09 b4       	in	r0, 0x29	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 710:	00 fe       	sbrs	r0, 0
 712:	fd cf       	rjmp	.-6      	; 0x70e <USB_ResetInterface+0x14>
 714:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 718:	98 2f       	mov	r25, r24
				
				USBCON = (Temp & ~(1 << USBE));
 71a:	9f 77       	andi	r25, 0x7F	; 127
 71c:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 720:	80 68       	ori	r24, 0x80	; 128
				USBCON = (Temp |  (1 << USBE));
 722:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 726:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 72a:	8e 7f       	andi	r24, 0xFE	; 254
 72c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 730:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 734:	8f 7d       	andi	r24, 0xDF	; 223
 736:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 73a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 73e:	8e 7f       	andi	r24, 0xFE	; 254
 740:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
 744:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 748:	8e 7f       	andi	r24, 0xFE	; 254
 74a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 74e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	USB_INT_Enable(USB_INT_SUSPEND);
 752:	81 60       	ori	r24, 0x01	; 1
 754:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 758:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	USB_INT_Clear(USB_INT_EORSTI);
 75c:	87 7f       	andi	r24, 0xF7	; 247
 75e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 762:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	USB_INT_Enable(USB_INT_EORSTI);
 766:	88 60       	ori	r24, 0x08	; 8
 768:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 76c:	08 95       	ret

0000076e <USB_Init>:
 76e:	c5 df       	rcall	.-118    	; 0x6fa <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <USB_IsInitialized>
 776:	08 95       	ret

00000778 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 778:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 77c:	08 95       	ret

0000077e <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 77e:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 782:	08 95       	ret

00000784 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 784:	1f 92       	push	r1
 786:	0f 92       	push	r0
 788:	0f b6       	in	r0, 0x3f	; 63
 78a:	0f 92       	push	r0
 78c:	11 24       	eor	r1, r1
 78e:	2f 93       	push	r18
 790:	3f 93       	push	r19
 792:	4f 93       	push	r20
 794:	5f 93       	push	r21
 796:	6f 93       	push	r22
 798:	7f 93       	push	r23
 79a:	8f 93       	push	r24
 79c:	9f 93       	push	r25
 79e:	af 93       	push	r26
 7a0:	bf 93       	push	r27
 7a2:	ef 93       	push	r30
 7a4:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 7a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 7aa:	80 ff       	sbrs	r24, 0
 7ac:	1b c0       	rjmp	.+54     	; 0x7e4 <__vector_11+0x60>
 7ae:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 7b2:	80 ff       	sbrs	r24, 0
 7b4:	17 c0       	rjmp	.+46     	; 0x7e4 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 7b6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 7ba:	8e 7f       	andi	r24, 0xFE	; 254
 7bc:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

		USB_INT_Disable(USB_INT_SUSPEND);
 7c0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 7c4:	8e 7f       	andi	r24, 0xFE	; 254
 7c6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Enable(USB_INT_WAKEUP);
 7ca:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 7ce:	80 61       	ori	r24, 0x10	; 16
 7d0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 7d4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 7d8:	80 62       	ori	r24, 0x20	; 32
 7da:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 7de:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 7e0:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 7e2:	48 dd       	rcall	.-1392   	; 0x274 <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 7e4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 7e8:	84 ff       	sbrs	r24, 4
 7ea:	29 c0       	rjmp	.+82     	; 0x83e <__vector_11+0xba>
 7ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 7f0:	84 ff       	sbrs	r24, 4
 7f2:	25 c0       	rjmp	.+74     	; 0x83e <__vector_11+0xba>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7f4:	84 e0       	ldi	r24, 0x04	; 4
 7f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 7f8:	89 b5       	in	r24, 0x29	; 41
 7fa:	82 60       	ori	r24, 0x02	; 2
 7fc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7fe:	09 b4       	in	r0, 0x29	; 41
 800:	00 fe       	sbrs	r0, 0
 802:	fd cf       	rjmp	.-6      	; 0x7fe <__vector_11+0x7a>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 804:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 808:	8f 7d       	andi	r24, 0xDF	; 223
 80a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 80e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 812:	8f 7e       	andi	r24, 0xEF	; 239
 814:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

		USB_INT_Disable(USB_INT_WAKEUP);
 818:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 81c:	8f 7e       	andi	r24, 0xEF	; 239
 81e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Enable(USB_INT_SUSPEND);
 822:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 82c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ConfigurationNumber>
 830:	81 11       	cpse	r24, r1
 832:	02 c0       	rjmp	.+4      	; 0x838 <__vector_11+0xb4>
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	01 c0       	rjmp	.+2      	; 0x83a <__vector_11+0xb6>
 838:	84 e0       	ldi	r24, 0x04	; 4
		EVENT_USB_Device_Connect();
 83a:	8e bb       	out	0x1e, r24	; 30
 83c:	1a dd       	rcall	.-1484   	; 0x272 <EVENT_USB_Device_Connect>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 83e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 842:	83 ff       	sbrs	r24, 3
 844:	22 c0       	rjmp	.+68     	; 0x88a <__vector_11+0x106>
 846:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 84a:	83 ff       	sbrs	r24, 3
 84c:	1e c0       	rjmp	.+60     	; 0x88a <__vector_11+0x106>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 84e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 852:	87 7f       	andi	r24, 0xF7	; 247
 854:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

		USB_DeviceState         = DEVICE_STATE_Default;
 858:	82 e0       	ldi	r24, 0x02	; 2
 85a:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
 85c:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <USB_ConfigurationNumber>

		USB_INT_Clear(USB_INT_SUSPEND);
 860:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 864:	8e 7f       	andi	r24, 0xFE	; 254
 866:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		USB_INT_Disable(USB_INT_SUSPEND);
 86a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 86e:	8e 7f       	andi	r24, 0xFE	; 254
 870:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Enable(USB_INT_WAKEUP);
 874:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 878:	80 61       	ori	r24, 0x10	; 16
 87a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

		Endpoint_ClearEndpoints();
 87e:	c9 dd       	rcall	.-1134   	; 0x412 <Endpoint_ClearEndpoints>
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 880:	42 e0       	ldi	r20, 0x02	; 2
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 886:	b2 dd       	rcall	.-1180   	; 0x3ec <Endpoint_ConfigureEndpoint_Prv>
 888:	13 d1       	rcall	.+550    	; 0xab0 <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 88a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 88e:	82 ff       	sbrs	r24, 2
 890:	0a c0       	rjmp	.+20     	; 0x8a6 <__vector_11+0x122>
 892:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 896:	82 ff       	sbrs	r24, 2
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <__vector_11+0x122>
	{
		USB_INT_Clear(USB_INT_SOFI);
 89a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 89e:	8b 7f       	andi	r24, 0xFB	; 251
 8a0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		
		EVENT_USB_Device_StartOfFrame();
 8a4:	f4 dc       	rcall	.-1560   	; 0x28e <EVENT_USB_Device_StartOfFrame>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	0f 90       	pop	r0
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	0f 90       	pop	r0
 8c4:	1f 90       	pop	r1
 8c6:	18 95       	reti

000008c8 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8c8:	1f 93       	push	r17
 8ca:	cf 93       	push	r28
 8cc:	df 93       	push	r29
 8ce:	00 d0       	rcall	.+0      	; 0x8d0 <USB_Device_ProcessControlRequest+0x8>
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
 8d4:	ee e9       	ldi	r30, 0x9E	; 158
 8d6:	f1 e0       	ldi	r31, 0x01	; 1
 8d8:	86 ea       	ldi	r24, 0xA6	; 166
 8da:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 8dc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 8e0:	21 93       	st	Z+, r18
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8e2:	8e 17       	cp	r24, r30
 8e4:	9f 07       	cpc	r25, r31
 8e6:	d1 f7       	brne	.-12     	; 0x8dc <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8e8:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
	
	switch (USB_ControlRequest.bRequest)
 8ec:	90 91 9f 01 	lds	r25, 0x019F	; 0x80019f <USB_ControlRequest+0x1>
 8f0:	49 2f       	mov	r20, r25
 8f2:	50 e0       	ldi	r21, 0x00	; 0
 8f4:	4a 30       	cpi	r20, 0x0A	; 10
 8f6:	51 05       	cpc	r21, r1
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <USB_Device_ProcessControlRequest+0x34>
 8fa:	d2 c0       	rjmp	.+420    	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d8>
 8fc:	fa 01       	movw	r30, r20
 8fe:	e6 5c       	subi	r30, 0xC6	; 198
 900:	ff 4f       	sbci	r31, 0xFF	; 255
 902:	ca c2       	rjmp	.+1428   	; 0xe98 <__tablejump2__>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 904:	80 38       	cpi	r24, 0x80	; 128
 906:	09 f4       	brne	.+2      	; 0x90a <USB_Device_ProcessControlRequest+0x42>
 908:	bc c0       	rjmp	.+376    	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
 90a:	82 38       	cpi	r24, 0x82	; 130
 90c:	09 f0       	breq	.+2      	; 0x910 <USB_Device_ProcessControlRequest+0x48>
 90e:	c8 c0       	rjmp	.+400    	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d8>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 910:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x4>
 914:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 916:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 91a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 91e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 922:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 926:	97 7f       	andi	r25, 0xF7	; 247
 928:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 92c:	85 fb       	bst	r24, 5
 92e:	88 27       	eor	r24, r24
 930:	80 f9       	bld	r24, 0
 932:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Word >> 8);
 936:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 93a:	80 c0       	rjmp	.+256    	; 0xa3c <USB_Device_ProcessControlRequest+0x174>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 93c:	28 2f       	mov	r18, r24
 93e:	2d 7f       	andi	r18, 0xFD	; 253
 940:	09 f0       	breq	.+2      	; 0x944 <USB_Device_ProcessControlRequest+0x7c>
 942:	ae c0       	rjmp	.+348    	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 944:	82 30       	cpi	r24, 0x02	; 2
 946:	09 f0       	breq	.+2      	; 0x94a <USB_Device_ProcessControlRequest+0x82>
 948:	9c c0       	rjmp	.+312    	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 94a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 94e:	81 11       	cpse	r24, r1
 950:	27 c0       	rjmp	.+78     	; 0x9a0 <USB_Device_ProcessControlRequest+0xd8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 952:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x4>
 956:	87 70       	andi	r24, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 958:	09 f4       	brne	.+2      	; 0x95c <USB_Device_ProcessControlRequest+0x94>
 95a:	93 c0       	rjmp	.+294    	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 95c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 960:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 964:	20 ff       	sbrs	r18, 0
 966:	8d c0       	rjmp	.+282    	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 968:	93 30       	cpi	r25, 0x03	; 3
 96a:	21 f4       	brne	.+8      	; 0x974 <USB_Device_ProcessControlRequest+0xac>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 96c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 970:	80 62       	ori	r24, 0x20	; 32
 972:	14 c0       	rjmp	.+40     	; 0x99c <USB_Device_ProcessControlRequest+0xd4>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 974:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 978:	90 61       	ori	r25, 0x10	; 16
 97a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 97e:	21 e0       	ldi	r18, 0x01	; 1
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	a9 01       	movw	r20, r18
 984:	02 c0       	rjmp	.+4      	; 0x98a <USB_Device_ProcessControlRequest+0xc2>
 986:	44 0f       	add	r20, r20
 988:	55 1f       	adc	r21, r21
 98a:	8a 95       	dec	r24
 98c:	e2 f7       	brpl	.-8      	; 0x986 <USB_Device_ProcessControlRequest+0xbe>
 98e:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
				UERST = 0;
 992:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 996:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 99a:	88 60       	ori	r24, 0x08	; 8
 99c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9a0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 9a8:	87 7f       	andi	r24, 0xF7	; 247
 9aa:	4b c0       	rjmp	.+150    	; 0xa42 <USB_Device_ProcessControlRequest+0x17a>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9ac:	81 11       	cpse	r24, r1
 9ae:	78 c0       	rjmp	.+240    	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9b0:	10 91 a0 01 	lds	r17, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 9b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 9b8:	87 7f       	andi	r24, 0xF7	; 247
 9ba:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 9be:	3d dd       	rcall	.-1414   	; 0x43a <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 9c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	
	while (!(Endpoint_IsINReady()))
 9c4:	80 fd       	sbrc	r24, 0
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <USB_Device_ProcessControlRequest+0x108>
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 9c8:	8e b3       	in	r24, 0x1e	; 30
 9ca:	81 11       	cpse	r24, r1
 9cc:	f9 cf       	rjmp	.-14     	; 0x9c0 <USB_Device_ProcessControlRequest+0xf8>
 9ce:	59 c0       	rjmp	.+178    	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9d0:	81 2f       	mov	r24, r17
 9d2:	8f 77       	andi	r24, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 9d4:	11 f4       	brne	.+4      	; 0x9da <USB_Device_ProcessControlRequest+0x112>
 9d6:	92 e0       	ldi	r25, 0x02	; 2
 9d8:	01 c0       	rjmp	.+2      	; 0x9dc <USB_Device_ProcessControlRequest+0x114>
 9da:	93 e0       	ldi	r25, 0x03	; 3
 9dc:	9e bb       	out	0x1e, r25	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 9de:	80 68       	ori	r24, 0x80	; 128
 9e0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 9e4:	4e c0       	rjmp	.+156    	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9e6:	80 58       	subi	r24, 0x80	; 128
 9e8:	82 30       	cpi	r24, 0x02	; 2
 9ea:	08 f0       	brcs	.+2      	; 0x9ee <USB_Device_ProcessControlRequest+0x126>
 9ec:	59 c0       	rjmp	.+178    	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 9ee:	ae 01       	movw	r20, r28
 9f0:	4f 5f       	subi	r20, 0xFF	; 255
 9f2:	5f 4f       	sbci	r21, 0xFF	; 255
 9f4:	60 91 a2 01 	lds	r22, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x4>
 9f8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 9fc:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x3>
 a00:	a6 dc       	rcall	.-1716   	; 0x34e <CALLBACK_USB_GetDescriptor>
 a02:	bc 01       	movw	r22, r24
 a04:	89 2b       	or	r24, r25
 a06:	09 f4       	brne	.+2      	; 0xa0a <USB_Device_ProcessControlRequest+0x142>
 a08:	3c c0       	rjmp	.+120    	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a0a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a0e:	97 7f       	andi	r25, 0xF7	; 247
 a10:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 a14:	89 81       	ldd	r24, Y+1	; 0x01
 a16:	9a 81       	ldd	r25, Y+2	; 0x02
 a18:	e0 dd       	rcall	.-1088   	; 0x5da <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a1e:	8b 77       	andi	r24, 0x7B	; 123
 a20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a24:	2e c0       	rjmp	.+92     	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a26:	80 38       	cpi	r24, 0x80	; 128
 a28:	d9 f5       	brne	.+118    	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d8>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a2a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a2e:	87 7f       	andi	r24, 0xF7	; 247
 a30:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 a34:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ConfigurationNumber>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a38:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a40:	8e 77       	andi	r24, 0x7E	; 126
 a42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a46:	f9 dc       	rcall	.-1550   	; 0x43a <Endpoint_ClearStatusStage>
 a48:	1c c0       	rjmp	.+56     	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a4a:	81 11       	cpse	r24, r1
 a4c:	29 c0       	rjmp	.+82     	; 0xaa0 <USB_Device_ProcessControlRequest+0x1d8>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a4e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 a52:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x3>
 a56:	99 27       	eor	r25, r25
 a58:	02 97       	sbiw	r24, 0x02	; 2
 a5a:	9c f4       	brge	.+38     	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a5c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a60:	87 7f       	andi	r24, 0xF7	; 247
 a62:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a66:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 a6a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <USB_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 a6e:	e5 dc       	rcall	.-1590   	; 0x43a <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 a70:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ConfigurationNumber>
 a74:	81 11       	cpse	r24, r1
 a76:	02 c0       	rjmp	.+4      	; 0xa7c <USB_Device_ProcessControlRequest+0x1b4>
 a78:	83 e0       	ldi	r24, 0x03	; 3
 a7a:	01 c0       	rjmp	.+2      	; 0xa7e <USB_Device_ProcessControlRequest+0x1b6>
 a7c:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
 a7e:	8e bb       	out	0x1e, r24	; 30
 a80:	fa db       	rcall	.-2060   	; 0x276 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
 a86:	83 ff       	sbrs	r24, 3
 a88:	0d c0       	rjmp	.+26     	; 0xaa4 <USB_Device_ProcessControlRequest+0x1dc>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a8a:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 a8e:	80 62       	ori	r24, 0x20	; 32
 a90:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a98:	87 7f       	andi	r24, 0xF7	; 247
 a9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <USB_Device_ProcessControlRequest+0x1dc>
 aa0:	f3 db       	rcall	.-2074   	; 0x288 <EVENT_USB_Device_UnhandledControlRequest>
 aa2:	ef cf       	rjmp	.-34     	; 0xa82 <USB_Device_ProcessControlRequest+0x1ba>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
 aa4:	0f 90       	pop	r0
 aa6:	0f 90       	pop	r0
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	08 95       	ret

00000ab0 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 ab0:	08 95       	ret

00000ab2 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ab2:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 ab4:	8e b3       	in	r24, 0x1e	; 30
 ab6:	88 23       	and	r24, r24
 ab8:	59 f0       	breq	.+22     	; 0xad0 <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 aba:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 abe:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ac0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ac4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 ac8:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 aca:	fe de       	rcall	.-516    	; 0x8c8 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 acc:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 ad0:	cf 91       	pop	r28
 ad2:	08 95       	ret

00000ad4 <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 ad4:	8f 92       	push	r8
 ad6:	9f 92       	push	r9
 ad8:	af 92       	push	r10
 ada:	bf 92       	push	r11
 adc:	cf 92       	push	r12
 ade:	df 92       	push	r13
 ae0:	ef 92       	push	r14
 ae2:	ff 92       	push	r15
 ae4:	0f 93       	push	r16
 ae6:	1f 93       	push	r17
 ae8:	cf 93       	push	r28
 aea:	df 93       	push	r29
 aec:	00 d0       	rcall	.+0      	; 0xaee <HID_Device_ProcessControlRequest+0x1a>
 aee:	1f 92       	push	r1
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
 af4:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 af6:	cd b6       	in	r12, 0x3d	; 61
 af8:	de b6       	in	r13, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 afa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 afe:	83 ff       	sbrs	r24, 3
 b00:	ef c0       	rjmp	.+478    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 b02:	f7 01       	movw	r30, r14
 b04:	80 81       	ld	r24, Z
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x4>
 b0c:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <USB_ControlRequest+0x5>
 b10:	28 17       	cp	r18, r24
 b12:	39 07       	cpc	r19, r25
 b14:	09 f0       	breq	.+2      	; 0xb18 <HID_Device_ProcessControlRequest+0x44>
 b16:	e4 c0       	rjmp	.+456    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
	  return;

	switch (USB_ControlRequest.bRequest)
 b18:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x1>
 b1c:	83 30       	cpi	r24, 0x03	; 3
 b1e:	09 f4       	brne	.+2      	; 0xb22 <HID_Device_ProcessControlRequest+0x4e>
 b20:	91 c0       	rjmp	.+290    	; 0xc44 <HID_Device_ProcessControlRequest+0x170>
 b22:	30 f4       	brcc	.+12     	; 0xb30 <HID_Device_ProcessControlRequest+0x5c>
 b24:	81 30       	cpi	r24, 0x01	; 1
 b26:	71 f0       	breq	.+28     	; 0xb44 <HID_Device_ProcessControlRequest+0x70>
 b28:	82 30       	cpi	r24, 0x02	; 2
 b2a:	09 f4       	brne	.+2      	; 0xb2e <HID_Device_ProcessControlRequest+0x5a>
 b2c:	c1 c0       	rjmp	.+386    	; 0xcb0 <HID_Device_ProcessControlRequest+0x1dc>
 b2e:	d8 c0       	rjmp	.+432    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
 b30:	8a 30       	cpi	r24, 0x0A	; 10
 b32:	09 f4       	brne	.+2      	; 0xb36 <HID_Device_ProcessControlRequest+0x62>
 b34:	a6 c0       	rjmp	.+332    	; 0xc82 <HID_Device_ProcessControlRequest+0x1ae>
 b36:	8b 30       	cpi	r24, 0x0B	; 11
 b38:	09 f4       	brne	.+2      	; 0xb3c <HID_Device_ProcessControlRequest+0x68>
 b3a:	91 c0       	rjmp	.+290    	; 0xc5e <HID_Device_ProcessControlRequest+0x18a>
 b3c:	89 30       	cpi	r24, 0x09	; 9
 b3e:	09 f0       	breq	.+2      	; 0xb42 <HID_Device_ProcessControlRequest+0x6e>
 b40:	cf c0       	rjmp	.+414    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
 b42:	4d c0       	rjmp	.+154    	; 0xbde <HID_Device_ProcessControlRequest+0x10a>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 b44:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
 b48:	81 3a       	cpi	r24, 0xA1	; 161
 b4a:	09 f0       	breq	.+2      	; 0xb4e <HID_Device_ProcessControlRequest+0x7a>
 b4c:	c9 c0       	rjmp	.+402    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
			{
 b4e:	8d b6       	in	r8, 0x3d	; 61
 b50:	9e b6       	in	r9, 0x3e	; 62
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 b56:	87 7f       	andi	r24, 0xF7	; 247
 b58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
 b5c:	1a 82       	std	Y+2, r1	; 0x02
 b5e:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 b60:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 b64:	10 91 a1 01 	lds	r17, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x3>
 b68:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 b6a:	f7 01       	movw	r30, r14
 b6c:	87 81       	ldd	r24, Z+7	; 0x07
 b6e:	48 2f       	mov	r20, r24
 b70:	50 e0       	ldi	r21, 0x00	; 0
 b72:	8d b7       	in	r24, 0x3d	; 61
 b74:	9e b7       	in	r25, 0x3e	; 62
 b76:	84 1b       	sub	r24, r20
 b78:	95 0b       	sbc	r25, r21
 b7a:	0f b6       	in	r0, 0x3f	; 63
 b7c:	f8 94       	cli
 b7e:	9e bf       	out	0x3e, r25	; 62
 b80:	0f be       	out	0x3f, r0	; 63
 b82:	8d bf       	out	0x3d, r24	; 61
 b84:	ed b7       	in	r30, 0x3d	; 61
 b86:	fe b7       	in	r31, 0x3e	; 62
 b88:	31 96       	adiw	r30, 0x01	; 1
 b8a:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
 b8c:	60 e0       	ldi	r22, 0x00	; 0
 b8e:	70 e0       	ldi	r23, 0x00	; 0
 b90:	cf 01       	movw	r24, r30
 b92:	9e d1       	rcall	.+828    	; 0xed0 <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 b94:	4f ef       	ldi	r20, 0xFF	; 255
 b96:	41 0f       	add	r20, r17
 b98:	8e 01       	movw	r16, r28
 b9a:	0f 5f       	subi	r16, 0xFF	; 255
 b9c:	1f 4f       	sbci	r17, 0xFF	; 255
 b9e:	95 01       	movw	r18, r10
 ba0:	be 01       	movw	r22, r28
 ba2:	6d 5f       	subi	r22, 0xFD	; 253
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	c7 01       	movw	r24, r14
 ba8:	7e db       	rcall	.-2308   	; 0x2a6 <CALLBACK_HID_Device_CreateHIDReport>
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 baa:	f7 01       	movw	r30, r14
 bac:	85 81       	ldd	r24, Z+5	; 0x05
 bae:	96 81       	ldd	r25, Z+6	; 0x06
 bb0:	00 97       	sbiw	r24, 0x00	; 0
 bb2:	21 f0       	breq	.+8      	; 0xbbc <HID_Device_ProcessControlRequest+0xe8>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 bb4:	47 81       	ldd	r20, Z+7	; 0x07
 bb6:	50 e0       	ldi	r21, 0x00	; 0
 bb8:	b5 01       	movw	r22, r10
 bba:	81 d1       	rcall	.+770    	; 0xebe <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bbc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 bc0:	69 81       	ldd	r22, Y+1	; 0x01
 bc2:	7a 81       	ldd	r23, Y+2	; 0x02
 bc4:	c5 01       	movw	r24, r10
 bc6:	b3 dc       	rcall	.-1690   	; 0x52e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 bcc:	8b 77       	andi	r24, 0x7B	; 123
 bce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 bd2:	0f b6       	in	r0, 0x3f	; 63
 bd4:	f8 94       	cli
 bd6:	9e be       	out	0x3e, r9	; 62
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	8d be       	out	0x3d, r8	; 61
 bdc:	81 c0       	rjmp	.+258    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 bde:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
 be2:	81 32       	cpi	r24, 0x21	; 33
 be4:	09 f0       	breq	.+2      	; 0xbe8 <HID_Device_ProcessControlRequest+0x114>
 be6:	7c c0       	rjmp	.+248    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 be8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 bec:	87 7f       	andi	r24, 0xF7	; 247
 bee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 bf2:	00 91 a4 01 	lds	r16, 0x01A4	; 0x8001a4 <USB_ControlRequest+0x6>
 bf6:	10 91 a5 01 	lds	r17, 0x01A5	; 0x8001a5 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 bfa:	a0 90 a0 01 	lds	r10, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 bfe:	b0 90 a1 01 	lds	r11, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 c02:	8d b7       	in	r24, 0x3d	; 61
 c04:	9e b7       	in	r25, 0x3e	; 62
 c06:	80 1b       	sub	r24, r16
 c08:	91 0b       	sbc	r25, r17
 c0a:	0f b6       	in	r0, 0x3f	; 63
 c0c:	f8 94       	cli
 c0e:	9e bf       	out	0x3e, r25	; 62
 c10:	0f be       	out	0x3f, r0	; 63
 c12:	8d bf       	out	0x3d, r24	; 61
 c14:	ed b7       	in	r30, 0x3d	; 61
 c16:	fe b7       	in	r31, 0x3e	; 62
 c18:	31 96       	adiw	r30, 0x01	; 1

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 c1a:	4f 01       	movw	r8, r30
 c1c:	b8 01       	movw	r22, r16
 c1e:	cf 01       	movw	r24, r30
 c20:	33 dd       	rcall	.-1434   	; 0x688 <Endpoint_Read_Control_Stream_LE>
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 c22:	4f ef       	ldi	r20, 0xFF	; 255
 c24:	4b 0d       	add	r20, r11
 c26:	94 01       	movw	r18, r8
 c28:	6a 2d       	mov	r22, r10
 c2a:	c7 01       	movw	r24, r14
 c2c:	58 db       	rcall	.-2384   	; 0x2de <CALLBACK_HID_Device_ProcessHIDReport>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c32:	8e 77       	andi	r24, 0x7E	; 126
 c34:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	f8 94       	cli
 c3c:	de be       	out	0x3e, r13	; 62
 c3e:	0f be       	out	0x3f, r0	; 63
 c40:	cd be       	out	0x3d, r12	; 61
 c42:	4e c0       	rjmp	.+156    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c44:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
 c48:	81 3a       	cpi	r24, 0xA1	; 161
 c4a:	09 f0       	breq	.+2      	; 0xc4e <HID_Device_ProcessControlRequest+0x17a>
 c4c:	49 c0       	rjmp	.+146    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c52:	87 7f       	andi	r24, 0xF7	; 247
 c54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 c58:	f7 01       	movw	r30, r14
 c5a:	80 85       	ldd	r24, Z+8	; 0x08
 c5c:	39 c0       	rjmp	.+114    	; 0xcd0 <HID_Device_ProcessControlRequest+0x1fc>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c5e:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
 c62:	81 32       	cpi	r24, 0x21	; 33
 c64:	e9 f5       	brne	.+122    	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
 c66:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c6a:	87 7f       	andi	r24, 0xF7	; 247
 c6c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 c70:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 c74:	81 e0       	ldi	r24, 0x01	; 1
 c76:	91 11       	cpse	r25, r1
 c78:	01 c0       	rjmp	.+2      	; 0xc7c <HID_Device_ProcessControlRequest+0x1a8>
 c7a:	80 e0       	ldi	r24, 0x00	; 0
 c7c:	f7 01       	movw	r30, r14
 c7e:	80 87       	std	Z+8, r24	; 0x08
 c80:	2e c0       	rjmp	.+92     	; 0xcde <HID_Device_ProcessControlRequest+0x20a>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c82:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
 c86:	81 32       	cpi	r24, 0x21	; 33
 c88:	59 f5       	brne	.+86     	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
 c8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c8e:	87 7f       	andi	r24, 0xF7	; 247
 c90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 c94:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x2>
 c98:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x3>
 c9c:	88 27       	eor	r24, r24
 c9e:	36 e0       	ldi	r19, 0x06	; 6
 ca0:	96 95       	lsr	r25
 ca2:	87 95       	ror	r24
 ca4:	3a 95       	dec	r19
 ca6:	e1 f7       	brne	.-8      	; 0xca0 <HID_Device_ProcessControlRequest+0x1cc>
 ca8:	f7 01       	movw	r30, r14
 caa:	92 87       	std	Z+10, r25	; 0x0a
 cac:	81 87       	std	Z+9, r24	; 0x09
 cae:	17 c0       	rjmp	.+46     	; 0xcde <HID_Device_ProcessControlRequest+0x20a>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cb0:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <USB_ControlRequest>
 cb4:	81 3a       	cpi	r24, 0xA1	; 161
 cb6:	a1 f4       	brne	.+40     	; 0xce0 <HID_Device_ProcessControlRequest+0x20c>
 cb8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 cbc:	87 7f       	andi	r24, 0xF7	; 247
 cbe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 cc2:	f7 01       	movw	r30, r14
 cc4:	81 85       	ldd	r24, Z+9	; 0x09
 cc6:	92 85       	ldd	r25, Z+10	; 0x0a
 cc8:	96 95       	lsr	r25
 cca:	87 95       	ror	r24
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 cd0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 cd8:	8e 77       	andi	r24, 0x7E	; 126
 cda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 cde:	ad db       	rcall	.-2214   	; 0x43a <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	f8 94       	cli
 ce4:	de be       	out	0x3e, r13	; 62
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	cd be       	out	0x3d, r12	; 61
 cea:	0f 90       	pop	r0
 cec:	0f 90       	pop	r0
 cee:	0f 90       	pop	r0
 cf0:	df 91       	pop	r29
 cf2:	cf 91       	pop	r28
 cf4:	1f 91       	pop	r17
 cf6:	0f 91       	pop	r16
 cf8:	ff 90       	pop	r15
 cfa:	ef 90       	pop	r14
 cfc:	df 90       	pop	r13
 cfe:	cf 90       	pop	r12
 d00:	bf 90       	pop	r11
 d02:	af 90       	pop	r10
 d04:	9f 90       	pop	r9
 d06:	8f 90       	pop	r8
 d08:	08 95       	ret

00000d0a <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 d0a:	cf 93       	push	r28
 d0c:	df 93       	push	r29
 d0e:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 d10:	dc 01       	movw	r26, r24
 d12:	18 96       	adiw	r26, 0x08	; 8
 d14:	85 e0       	ldi	r24, 0x05	; 5
 d16:	ed 01       	movw	r28, r26
 d18:	19 92       	st	Y+, r1
 d1a:	8a 95       	dec	r24
 d1c:	e9 f7       	brne	.-6      	; 0xd18 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 d1e:	81 e0       	ldi	r24, 0x01	; 1
 d20:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount = 500;
 d22:	84 ef       	ldi	r24, 0xF4	; 244
 d24:	91 e0       	ldi	r25, 0x01	; 1
 d26:	92 87       	std	Z+10, r25	; 0x0a
 d28:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 d2a:	82 81       	ldd	r24, Z+2	; 0x02
 d2c:	93 81       	ldd	r25, Z+3	; 0x03
 d2e:	24 81       	ldd	r18, Z+4	; 0x04
 d30:	21 11       	cpse	r18, r1
 d32:	02 c0       	rjmp	.+4      	; 0xd38 <HID_Device_ConfigureEndpoints+0x2e>
 d34:	c0 e0       	ldi	r28, 0x00	; 0
 d36:	01 c0       	rjmp	.+2      	; 0xd3a <HID_Device_ConfigureEndpoints+0x30>
 d38:	c4 e0       	ldi	r28, 0x04	; 4
 d3a:	d1 81       	ldd	r29, Z+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d3c:	49 db       	rcall	.-2414   	; 0x3d0 <Endpoint_BytesToEPSizeMaskDynamic>
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d3e:	8c 2b       	or	r24, r28
 d40:	48 2f       	mov	r20, r24
 d42:	42 60       	ori	r20, 0x02	; 2
 d44:	61 ec       	ldi	r22, 0xC1	; 193
 d46:	8d 2f       	mov	r24, r29
	{
		return false;
	}
	
	return true;
}
 d48:	df 91       	pop	r29
 d4a:	cf 91       	pop	r28
 d4c:	4f cb       	rjmp	.-2402   	; 0x3ec <Endpoint_ConfigureEndpoint_Prv>

00000d4e <HID_Device_USBTask>:
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 d4e:	5f 92       	push	r5
 d50:	6f 92       	push	r6
 d52:	7f 92       	push	r7
 d54:	8f 92       	push	r8
 d56:	9f 92       	push	r9
 d58:	af 92       	push	r10
 d5a:	bf 92       	push	r11
 d5c:	cf 92       	push	r12
 d5e:	df 92       	push	r13
 d60:	ef 92       	push	r14
 d62:	ff 92       	push	r15
 d64:	0f 93       	push	r16
 d66:	1f 93       	push	r17
 d68:	cf 93       	push	r28
 d6a:	df 93       	push	r29
 d6c:	00 d0       	rcall	.+0      	; 0xd6e <HID_Device_USBTask+0x20>
 d6e:	1f 92       	push	r1
 d70:	cd b7       	in	r28, 0x3d	; 61
 d72:	de b7       	in	r29, 0x3e	; 62
 d74:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
 d76:	ad b6       	in	r10, 0x3d	; 61
 d78:	be b6       	in	r11, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d7a:	8e b3       	in	r24, 0x1e	; 30
 d7c:	84 30       	cpi	r24, 0x04	; 4
 d7e:	09 f0       	breq	.+2      	; 0xd82 <HID_Device_USBTask+0x34>
 d80:	73 c0       	rjmp	.+230    	; 0xe68 <HID_Device_USBTask+0x11a>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 d82:	f7 01       	movw	r30, r14
 d84:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d86:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	
	if (Endpoint_IsReadWriteAllowed())
 d8e:	85 ff       	sbrs	r24, 5
 d90:	6b c0       	rjmp	.+214    	; 0xe68 <HID_Device_USBTask+0x11a>
	{
 d92:	8d b6       	in	r8, 0x3d	; 61
 d94:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 d96:	47 81       	ldd	r20, Z+7	; 0x07
 d98:	50 e0       	ldi	r21, 0x00	; 0
 d9a:	8d b7       	in	r24, 0x3d	; 61
 d9c:	9e b7       	in	r25, 0x3e	; 62
 d9e:	84 1b       	sub	r24, r20
 da0:	95 0b       	sbc	r25, r21
 da2:	0f b6       	in	r0, 0x3f	; 63
 da4:	f8 94       	cli
 da6:	9e bf       	out	0x3e, r25	; 62
 da8:	0f be       	out	0x3f, r0	; 63
 daa:	8d bf       	out	0x3d, r24	; 61
 dac:	ed b7       	in	r30, 0x3d	; 61
 dae:	fe b7       	in	r31, 0x3e	; 62
 db0:	31 96       	adiw	r30, 0x01	; 1
 db2:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 db4:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 db6:	1a 82       	std	Y+2, r1	; 0x02
 db8:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 dba:	60 e0       	ldi	r22, 0x00	; 0
 dbc:	70 e0       	ldi	r23, 0x00	; 0
 dbe:	cf 01       	movw	r24, r30
 dc0:	87 d0       	rcall	.+270    	; 0xed0 <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
 dc2:	8e 01       	movw	r16, r28
 dc4:	0f 5f       	subi	r16, 0xFF	; 255
 dc6:	1f 4f       	sbci	r17, 0xFF	; 255
 dc8:	96 01       	movw	r18, r12
 dca:	40 e0       	ldi	r20, 0x00	; 0
 dcc:	be 01       	movw	r22, r28
 dce:	6d 5f       	subi	r22, 0xFD	; 253
 dd0:	7f 4f       	sbci	r23, 0xFF	; 255
 dd2:	c7 01       	movw	r24, r14
 dd4:	68 da       	rcall	.-2864   	; 0x2a6 <CALLBACK_HID_Device_CreateHIDReport>
 dd6:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 dd8:	f7 01       	movw	r30, r14
 dda:	81 85       	ldd	r24, Z+9	; 0x09
 ddc:	92 85       	ldd	r25, Z+10	; 0x0a
 dde:	89 2b       	or	r24, r25
 de0:	29 f0       	breq	.+10     	; 0xdec <HID_Device_USBTask+0x9e>
 de2:	11 e0       	ldi	r17, 0x01	; 1
 de4:	83 85       	ldd	r24, Z+11	; 0x0b
 de6:	94 85       	ldd	r25, Z+12	; 0x0c
 de8:	89 2b       	or	r24, r25
 dea:	09 f0       	breq	.+2      	; 0xdee <HID_Device_USBTask+0xa0>
 dec:	10 e0       	ldi	r17, 0x00	; 0
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 dee:	f7 01       	movw	r30, r14
 df0:	65 80       	ldd	r6, Z+5	; 0x05
 df2:	76 80       	ldd	r7, Z+6	; 0x06
 df4:	61 14       	cp	r6, r1
 df6:	71 04       	cpc	r7, r1
 df8:	81 f0       	breq	.+32     	; 0xe1a <HID_Device_USBTask+0xcc>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 dfa:	49 81       	ldd	r20, Y+1	; 0x01
 dfc:	5a 81       	ldd	r21, Y+2	; 0x02
 dfe:	b3 01       	movw	r22, r6
 e00:	c6 01       	movw	r24, r12
 e02:	50 d0       	rcall	.+160    	; 0xea4 <memcmp>
 e04:	01 e0       	ldi	r16, 0x01	; 1
 e06:	89 2b       	or	r24, r25
 e08:	09 f4       	brne	.+2      	; 0xe0c <HID_Device_USBTask+0xbe>
 e0a:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 e0c:	f7 01       	movw	r30, r14
 e0e:	47 81       	ldd	r20, Z+7	; 0x07
 e10:	50 e0       	ldi	r21, 0x00	; 0
 e12:	b6 01       	movw	r22, r12
 e14:	c3 01       	movw	r24, r6
 e16:	53 d0       	rcall	.+166    	; 0xebe <memcpy>
 e18:	01 c0       	rjmp	.+2      	; 0xe1c <HID_Device_USBTask+0xce>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 e1a:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 e1c:	89 81       	ldd	r24, Y+1	; 0x01
 e1e:	9a 81       	ldd	r25, Y+2	; 0x02
 e20:	89 2b       	or	r24, r25
 e22:	e9 f0       	breq	.+58     	; 0xe5e <HID_Device_USBTask+0x110>
 e24:	51 10       	cpse	r5, r1
 e26:	04 c0       	rjmp	.+8      	; 0xe30 <HID_Device_USBTask+0xe2>
 e28:	01 11       	cpse	r16, r1
 e2a:	02 c0       	rjmp	.+4      	; 0xe30 <HID_Device_USBTask+0xe2>
 e2c:	10 ff       	sbrs	r17, 0
 e2e:	17 c0       	rjmp	.+46     	; 0xe5e <HID_Device_USBTask+0x110>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 e30:	f7 01       	movw	r30, r14
 e32:	81 85       	ldd	r24, Z+9	; 0x09
 e34:	92 85       	ldd	r25, Z+10	; 0x0a
 e36:	94 87       	std	Z+12, r25	; 0x0c
 e38:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e3a:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e3c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

			if (ReportID)
 e40:	8b 81       	ldd	r24, Y+3	; 0x03
 e42:	81 11       	cpse	r24, r1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 e44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 e48:	69 81       	ldd	r22, Y+1	; 0x01
 e4a:	7a 81       	ldd	r23, Y+2	; 0x02
 e4c:	40 e0       	ldi	r20, 0x00	; 0
 e4e:	50 e0       	ldi	r21, 0x00	; 0
 e50:	c6 01       	movw	r24, r12
 e52:	3d db       	rcall	.-2438   	; 0x4ce <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 e58:	8e 77       	andi	r24, 0x7E	; 126
 e5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 e5e:	0f b6       	in	r0, 0x3f	; 63
 e60:	f8 94       	cli
 e62:	9e be       	out	0x3e, r9	; 62
 e64:	0f be       	out	0x3f, r0	; 63
 e66:	8d be       	out	0x3d, r8	; 61
			
			Endpoint_ClearIN();
		}
	}
}
 e68:	0f b6       	in	r0, 0x3f	; 63
 e6a:	f8 94       	cli
 e6c:	be be       	out	0x3e, r11	; 62
 e6e:	0f be       	out	0x3f, r0	; 63
 e70:	ad be       	out	0x3d, r10	; 61
 e72:	0f 90       	pop	r0
 e74:	0f 90       	pop	r0
 e76:	0f 90       	pop	r0
 e78:	df 91       	pop	r29
 e7a:	cf 91       	pop	r28
 e7c:	1f 91       	pop	r17
 e7e:	0f 91       	pop	r16
 e80:	ff 90       	pop	r15
 e82:	ef 90       	pop	r14
 e84:	df 90       	pop	r13
 e86:	cf 90       	pop	r12
 e88:	bf 90       	pop	r11
 e8a:	af 90       	pop	r10
 e8c:	9f 90       	pop	r9
 e8e:	8f 90       	pop	r8
 e90:	7f 90       	pop	r7
 e92:	6f 90       	pop	r6
 e94:	5f 90       	pop	r5
 e96:	08 95       	ret

00000e98 <__tablejump2__>:
 e98:	ee 0f       	add	r30, r30
 e9a:	ff 1f       	adc	r31, r31
 e9c:	05 90       	lpm	r0, Z+
 e9e:	f4 91       	lpm	r31, Z
 ea0:	e0 2d       	mov	r30, r0
 ea2:	09 94       	ijmp

00000ea4 <memcmp>:
 ea4:	fb 01       	movw	r30, r22
 ea6:	dc 01       	movw	r26, r24
 ea8:	04 c0       	rjmp	.+8      	; 0xeb2 <memcmp+0xe>
 eaa:	8d 91       	ld	r24, X+
 eac:	01 90       	ld	r0, Z+
 eae:	80 19       	sub	r24, r0
 eb0:	21 f4       	brne	.+8      	; 0xeba <memcmp+0x16>
 eb2:	41 50       	subi	r20, 0x01	; 1
 eb4:	50 40       	sbci	r21, 0x00	; 0
 eb6:	c8 f7       	brcc	.-14     	; 0xeaa <memcmp+0x6>
 eb8:	88 1b       	sub	r24, r24
 eba:	99 0b       	sbc	r25, r25
 ebc:	08 95       	ret

00000ebe <memcpy>:
 ebe:	fb 01       	movw	r30, r22
 ec0:	dc 01       	movw	r26, r24
 ec2:	02 c0       	rjmp	.+4      	; 0xec8 <memcpy+0xa>
 ec4:	01 90       	ld	r0, Z+
 ec6:	0d 92       	st	X+, r0
 ec8:	41 50       	subi	r20, 0x01	; 1
 eca:	50 40       	sbci	r21, 0x00	; 0
 ecc:	d8 f7       	brcc	.-10     	; 0xec4 <memcpy+0x6>
 ece:	08 95       	ret

00000ed0 <memset>:
 ed0:	dc 01       	movw	r26, r24
 ed2:	01 c0       	rjmp	.+2      	; 0xed6 <memset+0x6>
 ed4:	6d 93       	st	X+, r22
 ed6:	41 50       	subi	r20, 0x01	; 1
 ed8:	50 40       	sbci	r21, 0x00	; 0
 eda:	e0 f7       	brcc	.-8      	; 0xed4 <memset+0x4>
 edc:	08 95       	ret

00000ede <_exit>:
 ede:	f8 94       	cli

00000ee0 <__stop_program>:
 ee0:	ff cf       	rjmp	.-2      	; 0xee0 <__stop_program>
