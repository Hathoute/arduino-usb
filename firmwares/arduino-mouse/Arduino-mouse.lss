
Arduino-mouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000eac  00000f40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000095  0080010e  0080010e  00000f4e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00000f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000044fc  00000000  00000000  000011fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001551  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026b4  00000000  00000000  00006c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000774  00000000  00000000  00009300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ba0  00000000  00000000  00009a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028d1  00000000  00000000  0000b614  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000290  00000000  00000000  0000dee5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	9c c0       	rjmp	.+312    	; 0x13a <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
   6:	00 00       	nop
   8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
   a:	00 00       	nop
   c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
   e:	00 00       	nop
  10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
  12:	00 00       	nop
  14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
  16:	00 00       	nop
  18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
  1e:	00 00       	nop
  20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
  22:	00 00       	nop
  24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
  26:	00 00       	nop
  28:	a3 c0       	rjmp	.+326    	; 0x170 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	90 c3       	rjmp	.+1824   	; 0x74e <__vector_11>
  2e:	00 00       	nop
  30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
  32:	00 00       	nop
  34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
  36:	00 00       	nop
  38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
  3e:	00 00       	nop
  40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
  42:	00 00       	nop
  44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
  46:	00 00       	nop
  48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
  4e:	00 00       	nop
  50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
  52:	00 00       	nop
  54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
  56:	00 00       	nop
  58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	26 c1       	rjmp	.+588    	; 0x2aa <__vector_23>
  5e:	00 00       	nop
  60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
  62:	00 00       	nop
  64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
  66:	00 00       	nop
  68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
  6e:	00 00       	nop
  70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
  72:	00 00       	nop
  74:	67 04       	cpc	r6, r7
  76:	83 04       	cpc	r8, r3
  78:	35 05       	cpc	r19, r5
  7a:	83 04       	cpc	r8, r3
  7c:	35 05       	cpc	r19, r5
  7e:	bb 04       	cpc	r11, r11
  80:	d8 04       	cpc	r13, r8
  82:	35 05       	cpc	r19, r5
  84:	f8 04       	cpc	r15, r8
  86:	0a 05       	cpc	r16, r10

00000088 <ProductString>:
  88:	1a 03 47 00 35 00 30 00 32 00 20 00 48 00 45 00     ..G.5.0.2. .H.E.
  98:	52 00 4f 00 20 00 53 00 45 00 00 00                 R.O. .S.E...

000000a4 <ManufacturerString>:
  a4:	10 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
  b4:	00 00                                               ..

000000b6 <LanguageString>:
  b6:	04 03 09 04                                         ....

000000ba <ConfigurationDescriptor>:
  ba:	09 02 3b 00 02 01 00 a0 96 09 04 01 00 01 03 00     ..;.............
  ca:	00 00 09 21 11 01 00 01 22 97 00 07 05 82 03 14     ...!....".......
  da:	00 01 09 04 00 00 01 03 01 02 00 09 21 11 01 00     ............!...
  ea:	01 22 32 00 07 05 81 03 08 00 01                    ."2........

000000f5 <DeviceDescriptor>:
  f5:	12 01 10 01 00 00 00 08 6d 04 8b c0 03 27 01 02     ........m....'..
 105:	03 01                                               ..

00000107 <MouseReport>:
 107:	05 01 09 02 a1 01 09 01 a1 00 95 03 75 01 05 09     ............u...
 117:	19 01 29 03 15 00 25 01 81 02 95 01 75 05 81 01     ..)...%.....u...
 127:	75 08 95 02 05 01 09 30 09 31 15 81 25 7f 81 06     u......0.1..%...
 137:	c0 c0 00                                            ...

0000013a <__ctors_end>:
 13a:	11 24       	eor	r1, r1
 13c:	1f be       	out	0x3f, r1	; 63
 13e:	cf ef       	ldi	r28, 0xFF	; 255
 140:	d2 e0       	ldi	r29, 0x02	; 2
 142:	de bf       	out	0x3e, r29	; 62
 144:	cd bf       	out	0x3d, r28	; 61

00000146 <__do_copy_data>:
 146:	11 e0       	ldi	r17, 0x01	; 1
 148:	a0 e0       	ldi	r26, 0x00	; 0
 14a:	b1 e0       	ldi	r27, 0x01	; 1
 14c:	ec ea       	ldi	r30, 0xAC	; 172
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	02 c0       	rjmp	.+4      	; 0x156 <__do_copy_data+0x10>
 152:	05 90       	lpm	r0, Z+
 154:	0d 92       	st	X+, r0
 156:	ae 30       	cpi	r26, 0x0E	; 14
 158:	b1 07       	cpc	r27, r17
 15a:	d9 f7       	brne	.-10     	; 0x152 <__do_copy_data+0xc>

0000015c <__do_clear_bss>:
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	ae e0       	ldi	r26, 0x0E	; 14
 160:	b1 e0       	ldi	r27, 0x01	; 1
 162:	01 c0       	rjmp	.+2      	; 0x166 <.do_clear_bss_start>

00000164 <.do_clear_bss_loop>:
 164:	1d 92       	st	X+, r1

00000166 <.do_clear_bss_start>:
 166:	a3 3a       	cpi	r26, 0xA3	; 163
 168:	b2 07       	cpc	r27, r18
 16a:	e1 f7       	brne	.-8      	; 0x164 <.do_clear_bss_loop>
 16c:	46 d0       	rcall	.+140    	; 0x1fa <main>
 16e:	9c c6       	rjmp	.+3384   	; 0xea8 <_exit>

00000170 <__bad_interrupt>:
 170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <RingBuffer_Remove.constprop.3>:
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 172:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <USARTtoUSB_Buffer+0x82>
 176:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <USARTtoUSB_Buffer+0x83>
 17a:	81 91       	ld	r24, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 17c:	f0 93 97 01 	sts	0x0197, r31	; 0x800197 <USARTtoUSB_Buffer+0x83>
 180:	e0 93 96 01 	sts	0x0196, r30	; 0x800196 <USARTtoUSB_Buffer+0x82>
 184:	e4 59       	subi	r30, 0x94	; 148
 186:	f1 40       	sbci	r31, 0x01	; 1
 188:	31 f4       	brne	.+12     	; 0x196 <RingBuffer_Remove.constprop.3+0x24>
			  Buffer->Out = Buffer->Buffer;
 18a:	24 e1       	ldi	r18, 0x14	; 20
 18c:	31 e0       	ldi	r19, 0x01	; 1
 18e:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <USARTtoUSB_Buffer+0x83>
 192:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <USARTtoUSB_Buffer+0x82>

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 196:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 198:	f8 94       	cli
			{
				Buffer->Count--;
 19a:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <USARTtoUSB_Buffer+0x84>
 19e:	91 50       	subi	r25, 0x01	; 1
 1a0:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <USARTtoUSB_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1a4:	2f bf       	out	0x3f, r18	; 63
			}
			
			return Data;
		}
 1a6:	08 95       	ret

000001a8 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1ac:	84 b7       	in	r24, 0x34	; 52
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	a8 95       	wdr
 1b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1bc:	88 61       	ori	r24, 0x18	; 24
 1be:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 1c8:	8c e0       	ldi	r24, 0x0C	; 12
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__DATA_REGION_ORIGIN__+0x6d>
 1d0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__DATA_REGION_ORIGIN__+0x6c>

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 1da:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__DATA_REGION_ORIGIN__+0x68>
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1de:	c9 ec       	ldi	r28, 0xC9	; 201
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	88 e1       	ldi	r24, 0x18	; 24
 1e4:	88 83       	st	Y, r24
				
				DDRD  |= (1 << 3);
 1e6:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 1e8:	5a 9a       	sbi	0x0b, 2	; 11
	wdt_disable();

	/* Hardware Initialization */
	Serial_Init(76800, false);
	USB_Init();
 1ea:	a6 d2       	rcall	.+1356   	; 0x738 <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 1ec:	84 e0       	ldi	r24, 0x04	; 4
 1ee:	85 bd       	out	0x25, r24	; 37
	
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 1f0:	88 e9       	ldi	r24, 0x98	; 152
 1f2:	88 83       	st	Y, r24
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:
int main(void)
{
	USB_MouseReport_Data_t newReport;
	int ind;

	SetupHardware();
 1fa:	d6 df       	rcall	.-84     	; 0x1a8 <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1fc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1fe:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
 200:	84 e1       	ldi	r24, 0x14	; 20
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <USARTtoUSB_Buffer+0x81>
 208:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <USARTtoUSB_Buffer+0x80>
				Buffer->Out = Buffer->Buffer;
 20c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <USARTtoUSB_Buffer+0x83>
 210:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <USARTtoUSB_Buffer+0x82>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 214:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

	sei();
 216:	78 94       	sei
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 218:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 21a:	f8 94       	cli
			{
				Count = Buffer->Count;
 21c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USARTtoUSB_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 220:	9f bf       	out	0x3f, r25	; 63

	for (;;) {
	    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

	    if (BufferCount >= 4) {
 222:	84 30       	cpi	r24, 0x04	; 4
		for (ind=0; ind<3; ind++) {
		    ((uint8_t *)&newReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 224:	68 f0       	brcs	.+26     	; 0x240 <main+0x46>
 226:	a5 df       	rcall	.-182    	; 0x172 <RingBuffer_Remove.constprop.3>
 228:	18 2f       	mov	r17, r24
 22a:	a3 df       	rcall	.-186    	; 0x172 <RingBuffer_Remove.constprop.3>
 22c:	d8 2f       	mov	r29, r24
 22e:	a1 df       	rcall	.-190    	; 0x172 <RingBuffer_Remove.constprop.3>
		}

		RingBuffer_Remove(&USARTtoUSB_Buffer);	// unused wheel for now
 230:	c8 2f       	mov	r28, r24
 232:	9f df       	rcall	.-194    	; 0x172 <RingBuffer_Remove.constprop.3>

		mouseReport.Button = newReport.Button;
 234:	10 93 0e 01 	sts	0x010E, r17	; 0x80010e <__data_end>
		mouseReport.X = newReport.X;
 238:	d0 93 0f 01 	sts	0x010F, r29	; 0x80010f <__data_end+0x1>
		mouseReport.Y = newReport.Y;
	    }

	    HID_Device_USBTask(&Mouse_HID_Interface);
 23c:	c0 93 10 01 	sts	0x0110, r28	; 0x800110 <__data_end+0x2>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	91 e0       	ldi	r25, 0x01	; 1
	    USB_USBTask();
 244:	69 d5       	rcall	.+2770   	; 0xd18 <HID_Device_USBTask>
 246:	1a d4       	rcall	.+2100   	; 0xa7c <USB_USBTask>
	}
 248:	e7 cf       	rjmp	.-50     	; 0x218 <main+0x1e>

0000024a <EVENT_USB_Device_Connect>:
 24a:	08 95       	ret

0000024c <EVENT_USB_Device_Disconnect>:
	//LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
 24c:	08 95       	ret

0000024e <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	HID_Device_ConfigureEndpoints(&Mouse_HID_Interface);
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	40 d5       	rcall	.+2688   	; 0xcd4 <HID_Device_ConfigureEndpoints>
			 *  at the start of each USB frame when enumerated in device mode.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB_INT_Enable(USB_INT_SOFI);
 254:	e2 ee       	ldi	r30, 0xE2	; 226
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	84 60       	ori	r24, 0x04	; 4
 25c:	80 83       	st	Z, r24
 25e:	08 95       	ret

00000260 <EVENT_USB_Device_UnhandledControlRequest>:
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	HID_Device_ProcessControlRequest(&Mouse_HID_Interface);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	1c c4       	rjmp	.+2104   	; 0xa9e <HID_Device_ProcessControlRequest>

00000266 <EVENT_USB_Device_StartOfFrame>:
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 266:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Mouse_HID_Interface+0xb>
 26a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Mouse_HID_Interface+0xc>
 26e:	00 97       	sbiw	r24, 0x00	; 0
 270:	29 f0       	breq	.+10     	; 0x27c <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <Mouse_HID_Interface+0xc>
 278:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Mouse_HID_Interface+0xb>
 27c:	08 95       	ret

0000027e <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    uint8_t* const ReportID,
    const uint8_t ReportType,
    void* ReportData,
    uint16_t* const ReportSize)
{
 27e:	0f 93       	push	r16
 280:	1f 93       	push	r17
	USB_MouseReport_Data_t* reportp = (USB_MouseReport_Data_t*)ReportData;

	*reportp = mouseReport;
 282:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 286:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <__data_end+0x1>
 28a:	a0 91 10 01 	lds	r26, 0x0110	; 0x800110 <__data_end+0x2>
 28e:	f9 01       	movw	r30, r18
 290:	80 83       	st	Z, r24
 292:	91 83       	std	Z+1, r25	; 0x01
 294:	a2 83       	std	Z+2, r26	; 0x02

	*ReportSize = sizeof(USB_MouseReport_Data_t);
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	f8 01       	movw	r30, r16
 29c:	91 83       	std	Z+1, r25	; 0x01
 29e:	80 83       	st	Z, r24
	return false;
}
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	1f 91       	pop	r17
 2a4:	0f 91       	pop	r16
 2a6:	08 95       	ret

000002a8 <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
 2a8:	08 95       	ret

000002aa <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	ef 93       	push	r30
 2bc:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
 2be:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__DATA_REGION_ORIGIN__+0x6e>

	if (USB_DeviceState == DEVICE_STATE_Configured)
 2c2:	9e b3       	in	r25, 0x1e	; 30
 2c4:	94 30       	cpi	r25, 0x04	; 4
 2c6:	f1 f4       	brne	.+60     	; 0x304 <__stack+0x5>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 2c8:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <USARTtoUSB_Buffer+0x80>
 2cc:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <USARTtoUSB_Buffer+0x81>
 2d0:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 2d2:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <USARTtoUSB_Buffer+0x80>
 2d6:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <USARTtoUSB_Buffer+0x81>
 2da:	cf 01       	movw	r24, r30
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <USARTtoUSB_Buffer+0x81>
 2e2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <USARTtoUSB_Buffer+0x80>
 2e6:	84 59       	subi	r24, 0x94	; 148
 2e8:	91 40       	sbci	r25, 0x01	; 1
 2ea:	21 f4       	brne	.+8      	; 0x2f4 <__vector_23+0x4a>
			  Buffer->In = Buffer->Buffer;
 2ec:	84 e1       	ldi	r24, 0x14	; 20
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	92 83       	std	Z+2, r25	; 0x02
 2f2:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2f4:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2f6:	f8 94       	cli
			{
				Buffer->Count++;
 2f8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <USARTtoUSB_Buffer+0x84>
 2fc:	8f 5f       	subi	r24, 0xFF	; 255
 2fe:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <USARTtoUSB_Buffer+0x84>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 302:	9f bf       	out	0x3f, r25	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti

00000318 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 318:	29 2f       	mov	r18, r25
 31a:	33 27       	eor	r19, r19
 31c:	23 30       	cpi	r18, 0x03	; 3
 31e:	31 05       	cpc	r19, r1
 320:	e1 f0       	breq	.+56     	; 0x35a <CALLBACK_USB_GetDescriptor+0x42>
 322:	58 f4       	brcc	.+22     	; 0x33a <CALLBACK_USB_GetDescriptor+0x22>
 324:	21 30       	cpi	r18, 0x01	; 1
 326:	31 05       	cpc	r19, r1
 328:	99 f0       	breq	.+38     	; 0x350 <CALLBACK_USB_GetDescriptor+0x38>
 32a:	22 30       	cpi	r18, 0x02	; 2
 32c:	31 05       	cpc	r19, r1
 32e:	69 f5       	brne	.+90     	; 0x38a <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 330:	8b e3       	ldi	r24, 0x3B	; 59
 332:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
 334:	2a eb       	ldi	r18, 0xBA	; 186
 336:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 338:	2c c0       	rjmp	.+88     	; 0x392 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 33a:	21 32       	cpi	r18, 0x21	; 33
 33c:	31 05       	cpc	r19, r1
 33e:	01 f1       	breq	.+64     	; 0x380 <CALLBACK_USB_GetDescriptor+0x68>
 340:	22 32       	cpi	r18, 0x22	; 34
 342:	31 05       	cpc	r19, r1
 344:	11 f5       	brne	.+68     	; 0x38a <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&MouseReport;
			Size    = sizeof(MouseReport);
 346:	82 e3       	ldi	r24, 0x32	; 50
 348:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&MouseReport;
 34a:	27 e0       	ldi	r18, 0x07	; 7
 34c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(MouseReport);
			break;
 34e:	21 c0       	rjmp	.+66     	; 0x392 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 350:	82 e1       	ldi	r24, 0x12	; 18
 352:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
 354:	25 ef       	ldi	r18, 0xF5	; 245
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	1c c0       	rjmp	.+56     	; 0x392 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 35a:	99 27       	eor	r25, r25
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	91 05       	cpc	r25, r1
 360:	49 f0       	breq	.+18     	; 0x374 <CALLBACK_USB_GetDescriptor+0x5c>
 362:	28 f0       	brcs	.+10     	; 0x36e <CALLBACK_USB_GetDescriptor+0x56>
 364:	02 97       	sbiw	r24, 0x02	; 2
 366:	89 f4       	brne	.+34     	; 0x38a <CALLBACK_USB_GetDescriptor+0x72>
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 368:	e8 e8       	ldi	r30, 0x88	; 136
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	05 c0       	rjmp	.+10     	; 0x378 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case 0x00:
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 36e:	e6 eb       	ldi	r30, 0xB6	; 182
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 374:	e4 ea       	ldi	r30, 0xA4	; 164
 376:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02:
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 378:	84 91       	lpm	r24, Z
 37a:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01:
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = (void*)&ProductString;
 37c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 37e:	09 c0       	rjmp	.+18     	; 0x392 <CALLBACK_USB_GetDescriptor+0x7a>
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
			Size    = sizeof(USB_HID_Descriptor_t);
 380:	89 e0       	ldi	r24, 0x09	; 9
 382:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
 384:	2c ec       	ldi	r18, 0xCC	; 204
 386:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
 388:	04 c0       	rjmp	.+8      	; 0x392 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&MouseReport;
			Size    = sizeof(MouseReport);
			break;
	}
	
	*DescriptorAddress = Address;		
 392:	fa 01       	movw	r30, r20
 394:	31 83       	std	Z+1, r19	; 0x01
 396:	20 83       	st	Z, r18
	return Size;
}
 398:	08 95       	ret

0000039a <Endpoint_BytesToEPSizeMaskDynamic>:
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 39a:	ac 01       	movw	r20, r24
 39c:	28 e0       	ldi	r18, 0x08	; 8
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	24 17       	cp	r18, r20
 3a4:	35 07       	cpc	r19, r21
 3a6:	20 f4       	brcc	.+8      	; 0x3b0 <Endpoint_BytesToEPSizeMaskDynamic+0x16>
 3a8:	8f 5f       	subi	r24, 0xFF	; 255
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	f9 cf       	rjmp	.-14     	; 0x3a2 <Endpoint_BytesToEPSizeMaskDynamic+0x8>
 3b0:	82 95       	swap	r24
 3b2:	80 7f       	andi	r24, 0xF0	; 240
 3b4:	08 95       	ret

000003b6 <Endpoint_ConfigureEndpoint_Prv>:
 3b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 3ba:	eb ee       	ldi	r30, 0xEB	; 235
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	81 60       	ori	r24, 0x01	; 1
 3c2:	80 83       	st	Z, r24
 3c4:	ed ee       	ldi	r30, 0xED	; 237
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	10 82       	st	Z, r1
 3ca:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 3ce:	40 83       	st	Z, r20
 3d0:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 3d4:	88 1f       	adc	r24, r24
 3d6:	88 27       	eor	r24, r24
 3d8:	88 1f       	adc	r24, r24
 3da:	08 95       	ret

000003dc <Endpoint_ClearEndpoints>:
 3dc:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__DATA_REGION_ORIGIN__+0x94>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 3e6:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 3ea:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 3ee:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 3f2:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 3f6:	9e 7f       	andi	r25, 0xFE	; 254
 3f8:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 3fc:	8f 5f       	subi	r24, 0xFF	; 255
 3fe:	85 30       	cpi	r24, 0x05	; 5
 400:	81 f7       	brne	.-32     	; 0x3e2 <Endpoint_ClearEndpoints+0x6>
 402:	08 95       	ret

00000404 <Endpoint_ClearStatusStage>:
 404:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
 408:	87 ff       	sbrs	r24, 7
 40a:	0f c0       	rjmp	.+30     	; 0x42a <Endpoint_ClearStatusStage+0x26>
 40c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 410:	82 fd       	sbrc	r24, 2
 412:	04 c0       	rjmp	.+8      	; 0x41c <Endpoint_ClearStatusStage+0x18>
 414:	8e b3       	in	r24, 0x1e	; 30
 416:	81 11       	cpse	r24, r1
 418:	f9 cf       	rjmp	.-14     	; 0x40c <Endpoint_ClearStatusStage+0x8>
 41a:	10 c0       	rjmp	.+32     	; 0x43c <Endpoint_ClearStatusStage+0x38>
 41c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 420:	8b 77       	andi	r24, 0x7B	; 123
 422:	0a c0       	rjmp	.+20     	; 0x438 <Endpoint_ClearStatusStage+0x34>
 424:	8e b3       	in	r24, 0x1e	; 30
 426:	88 23       	and	r24, r24
 428:	49 f0       	breq	.+18     	; 0x43c <Endpoint_ClearStatusStage+0x38>
 42a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 42e:	80 ff       	sbrs	r24, 0
 430:	f9 cf       	rjmp	.-14     	; 0x424 <Endpoint_ClearStatusStage+0x20>
 432:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 436:	8e 77       	andi	r24, 0x7E	; 126
 438:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 43c:	08 95       	ret

0000043e <Endpoint_WaitUntilReady>:
 43e:	85 e6       	ldi	r24, 0x65	; 101
 440:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 444:	90 ff       	sbrs	r25, 0
 446:	05 c0       	rjmp	.+10     	; 0x452 <Endpoint_WaitUntilReady+0x14>
 448:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 44c:	90 ff       	sbrs	r25, 0
 44e:	05 c0       	rjmp	.+10     	; 0x45a <Endpoint_WaitUntilReady+0x1c>
 450:	1b c0       	rjmp	.+54     	; 0x488 <Endpoint_WaitUntilReady+0x4a>
 452:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 456:	92 fd       	sbrc	r25, 2
 458:	17 c0       	rjmp	.+46     	; 0x488 <Endpoint_WaitUntilReady+0x4a>
 45a:	9e b3       	in	r25, 0x1e	; 30
 45c:	99 23       	and	r25, r25
 45e:	b1 f0       	breq	.+44     	; 0x48c <Endpoint_WaitUntilReady+0x4e>
 460:	9e b3       	in	r25, 0x1e	; 30
 462:	95 30       	cpi	r25, 0x05	; 5
 464:	a9 f0       	breq	.+42     	; 0x490 <Endpoint_WaitUntilReady+0x52>
 466:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 46a:	95 fd       	sbrc	r25, 5
 46c:	13 c0       	rjmp	.+38     	; 0x494 <Endpoint_WaitUntilReady+0x56>
 46e:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 472:	92 ff       	sbrs	r25, 2
 474:	e5 cf       	rjmp	.-54     	; 0x440 <Endpoint_WaitUntilReady+0x2>
 476:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 47a:	9b 7f       	andi	r25, 0xFB	; 251
 47c:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 480:	81 50       	subi	r24, 0x01	; 1
 482:	f1 f6       	brne	.-68     	; 0x440 <Endpoint_WaitUntilReady+0x2>
 484:	84 e0       	ldi	r24, 0x04	; 4
 486:	08 95       	ret
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret
 48c:	82 e0       	ldi	r24, 0x02	; 2
 48e:	08 95       	ret
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	08 95       	ret
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	08 95       	ret

00000498 <Endpoint_Write_Stream_LE>:
 498:	ef 92       	push	r14
 49a:	ff 92       	push	r15
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	8c 01       	movw	r16, r24
 4a6:	eb 01       	movw	r28, r22
 4a8:	7a 01       	movw	r14, r20
 4aa:	c9 df       	rcall	.-110    	; 0x43e <Endpoint_WaitUntilReady>
 4ac:	81 11       	cpse	r24, r1
 4ae:	1d c0       	rjmp	.+58     	; 0x4ea <Endpoint_Write_Stream_LE+0x52>
 4b0:	20 97       	sbiw	r28, 0x00	; 0
 4b2:	d1 f0       	breq	.+52     	; 0x4e8 <Endpoint_Write_Stream_LE+0x50>
 4b4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4b8:	85 fd       	sbrc	r24, 5
 4ba:	0e c0       	rjmp	.+28     	; 0x4d8 <Endpoint_Write_Stream_LE+0x40>
 4bc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4c0:	8e 77       	andi	r24, 0x7E	; 126
 4c2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4c6:	e1 14       	cp	r14, r1
 4c8:	f1 04       	cpc	r15, r1
 4ca:	79 f3       	breq	.-34     	; 0x4aa <Endpoint_Write_Stream_LE+0x12>
 4cc:	f7 01       	movw	r30, r14
 4ce:	09 95       	icall
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	59 f7       	brne	.-42     	; 0x4aa <Endpoint_Write_Stream_LE+0x12>
 4d4:	85 e0       	ldi	r24, 0x05	; 5
 4d6:	09 c0       	rjmp	.+18     	; 0x4ea <Endpoint_Write_Stream_LE+0x52>
 4d8:	f8 01       	movw	r30, r16
 4da:	80 81       	ld	r24, Z
 4dc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 4e0:	21 97       	sbiw	r28, 0x01	; 1
 4e2:	0f 5f       	subi	r16, 0xFF	; 255
 4e4:	1f 4f       	sbci	r17, 0xFF	; 255
 4e6:	e4 cf       	rjmp	.-56     	; 0x4b0 <Endpoint_Write_Stream_LE+0x18>
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	1f 91       	pop	r17
 4f0:	0f 91       	pop	r16
 4f2:	ff 90       	pop	r15
 4f4:	ef 90       	pop	r14
 4f6:	08 95       	ret

000004f8 <Endpoint_Write_Control_Stream_LE>:
 4f8:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x6>
 4fc:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x7>
 500:	26 17       	cp	r18, r22
 502:	37 07       	cpc	r19, r23
 504:	48 f0       	brcs	.+18     	; 0x518 <Endpoint_Write_Control_Stream_LE+0x20>
 506:	61 15       	cp	r22, r1
 508:	71 05       	cpc	r23, r1
 50a:	39 f4       	brne	.+14     	; 0x51a <Endpoint_Write_Control_Stream_LE+0x22>
 50c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 510:	2e 77       	andi	r18, 0x7E	; 126
 512:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 516:	01 c0       	rjmp	.+2      	; 0x51a <Endpoint_Write_Control_Stream_LE+0x22>
 518:	b9 01       	movw	r22, r18
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	61 15       	cp	r22, r1
 51e:	71 05       	cpc	r23, r1
 520:	61 f1       	breq	.+88     	; 0x57a <Endpoint_Write_Control_Stream_LE+0x82>
 522:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 526:	23 fd       	sbrc	r18, 3
 528:	37 c0       	rjmp	.+110    	; 0x598 <Endpoint_Write_Control_Stream_LE+0xa0>
 52a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 52e:	22 fd       	sbrc	r18, 2
 530:	2d c0       	rjmp	.+90     	; 0x58c <Endpoint_Write_Control_Stream_LE+0x94>
 532:	2e b3       	in	r18, 0x1e	; 30
 534:	22 23       	and	r18, r18
 536:	91 f1       	breq	.+100    	; 0x59c <Endpoint_Write_Control_Stream_LE+0xa4>
 538:	2e b3       	in	r18, 0x1e	; 30
 53a:	25 30       	cpi	r18, 0x05	; 5
 53c:	89 f1       	breq	.+98     	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0xa8>
 53e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 542:	20 ff       	sbrs	r18, 0
 544:	eb cf       	rjmp	.-42     	; 0x51c <Endpoint_Write_Control_Stream_LE+0x24>
 546:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 54a:	fc 01       	movw	r30, r24
 54c:	cf 01       	movw	r24, r30
 54e:	61 15       	cp	r22, r1
 550:	71 05       	cpc	r23, r1
 552:	49 f0       	breq	.+18     	; 0x566 <Endpoint_Write_Control_Stream_LE+0x6e>
 554:	28 30       	cpi	r18, 0x08	; 8
 556:	38 f4       	brcc	.+14     	; 0x566 <Endpoint_Write_Control_Stream_LE+0x6e>
 558:	81 91       	ld	r24, Z+
 55a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 55e:	61 50       	subi	r22, 0x01	; 1
 560:	71 09       	sbc	r23, r1
 562:	2f 5f       	subi	r18, 0xFF	; 255
 564:	f3 cf       	rjmp	.-26     	; 0x54c <Endpoint_Write_Control_Stream_LE+0x54>
 566:	31 e0       	ldi	r19, 0x01	; 1
 568:	28 30       	cpi	r18, 0x08	; 8
 56a:	09 f0       	breq	.+2      	; 0x56e <Endpoint_Write_Control_Stream_LE+0x76>
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 572:	2e 77       	andi	r18, 0x7E	; 126
 574:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 578:	d1 cf       	rjmp	.-94     	; 0x51c <Endpoint_Write_Control_Stream_LE+0x24>
 57a:	31 11       	cpse	r19, r1
 57c:	d2 cf       	rjmp	.-92     	; 0x522 <Endpoint_Write_Control_Stream_LE+0x2a>
 57e:	06 c0       	rjmp	.+12     	; 0x58c <Endpoint_Write_Control_Stream_LE+0x94>
 580:	8e b3       	in	r24, 0x1e	; 30
 582:	88 23       	and	r24, r24
 584:	59 f0       	breq	.+22     	; 0x59c <Endpoint_Write_Control_Stream_LE+0xa4>
 586:	8e b3       	in	r24, 0x1e	; 30
 588:	85 30       	cpi	r24, 0x05	; 5
 58a:	51 f0       	breq	.+20     	; 0x5a0 <Endpoint_Write_Control_Stream_LE+0xa8>
 58c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 590:	82 ff       	sbrs	r24, 2
 592:	f6 cf       	rjmp	.-20     	; 0x580 <Endpoint_Write_Control_Stream_LE+0x88>
 594:	80 e0       	ldi	r24, 0x00	; 0
 596:	08 95       	ret
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	08 95       	ret
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	08 95       	ret
 5a0:	83 e0       	ldi	r24, 0x03	; 3
 5a2:	08 95       	ret

000005a4 <Endpoint_Write_Control_PStream_LE>:
 5a4:	20 91 a1 01 	lds	r18, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x6>
 5a8:	30 91 a2 01 	lds	r19, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x7>
 5ac:	26 17       	cp	r18, r22
 5ae:	37 07       	cpc	r19, r23
 5b0:	48 f0       	brcs	.+18     	; 0x5c4 <Endpoint_Write_Control_PStream_LE+0x20>
 5b2:	61 15       	cp	r22, r1
 5b4:	71 05       	cpc	r23, r1
 5b6:	39 f4       	brne	.+14     	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0x22>
 5b8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5bc:	2e 77       	andi	r18, 0x7E	; 126
 5be:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <Endpoint_Write_Control_PStream_LE+0x22>
 5c4:	b9 01       	movw	r22, r18
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	61 15       	cp	r22, r1
 5ca:	71 05       	cpc	r23, r1
 5cc:	69 f1       	breq	.+90     	; 0x628 <Endpoint_Write_Control_PStream_LE+0x84>
 5ce:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5d2:	23 fd       	sbrc	r18, 3
 5d4:	38 c0       	rjmp	.+112    	; 0x646 <Endpoint_Write_Control_PStream_LE+0xa2>
 5d6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5da:	22 fd       	sbrc	r18, 2
 5dc:	2e c0       	rjmp	.+92     	; 0x63a <Endpoint_Write_Control_PStream_LE+0x96>
 5de:	2e b3       	in	r18, 0x1e	; 30
 5e0:	22 23       	and	r18, r18
 5e2:	99 f1       	breq	.+102    	; 0x64a <Endpoint_Write_Control_PStream_LE+0xa6>
 5e4:	2e b3       	in	r18, 0x1e	; 30
 5e6:	25 30       	cpi	r18, 0x05	; 5
 5e8:	91 f1       	breq	.+100    	; 0x64e <Endpoint_Write_Control_PStream_LE+0xaa>
 5ea:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 5ee:	20 ff       	sbrs	r18, 0
 5f0:	eb cf       	rjmp	.-42     	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x24>
 5f2:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 5f6:	fc 01       	movw	r30, r24
 5f8:	cf 01       	movw	r24, r30
 5fa:	61 15       	cp	r22, r1
 5fc:	71 05       	cpc	r23, r1
 5fe:	51 f0       	breq	.+20     	; 0x614 <Endpoint_Write_Control_PStream_LE+0x70>
 600:	28 30       	cpi	r18, 0x08	; 8
 602:	40 f4       	brcc	.+16     	; 0x614 <Endpoint_Write_Control_PStream_LE+0x70>
 604:	84 91       	lpm	r24, Z
 606:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 60a:	61 50       	subi	r22, 0x01	; 1
 60c:	71 09       	sbc	r23, r1
 60e:	2f 5f       	subi	r18, 0xFF	; 255
 610:	31 96       	adiw	r30, 0x01	; 1
 612:	f2 cf       	rjmp	.-28     	; 0x5f8 <Endpoint_Write_Control_PStream_LE+0x54>
 614:	31 e0       	ldi	r19, 0x01	; 1
 616:	28 30       	cpi	r18, 0x08	; 8
 618:	09 f0       	breq	.+2      	; 0x61c <Endpoint_Write_Control_PStream_LE+0x78>
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 620:	2e 77       	andi	r18, 0x7E	; 126
 622:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 626:	d0 cf       	rjmp	.-96     	; 0x5c8 <Endpoint_Write_Control_PStream_LE+0x24>
 628:	31 11       	cpse	r19, r1
 62a:	d1 cf       	rjmp	.-94     	; 0x5ce <Endpoint_Write_Control_PStream_LE+0x2a>
 62c:	06 c0       	rjmp	.+12     	; 0x63a <Endpoint_Write_Control_PStream_LE+0x96>
 62e:	8e b3       	in	r24, 0x1e	; 30
 630:	88 23       	and	r24, r24
 632:	59 f0       	breq	.+22     	; 0x64a <Endpoint_Write_Control_PStream_LE+0xa6>
 634:	8e b3       	in	r24, 0x1e	; 30
 636:	85 30       	cpi	r24, 0x05	; 5
 638:	51 f0       	breq	.+20     	; 0x64e <Endpoint_Write_Control_PStream_LE+0xaa>
 63a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 63e:	82 ff       	sbrs	r24, 2
 640:	f6 cf       	rjmp	.-20     	; 0x62e <Endpoint_Write_Control_PStream_LE+0x8a>
 642:	80 e0       	ldi	r24, 0x00	; 0
 644:	08 95       	ret
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	08 95       	ret
 64a:	82 e0       	ldi	r24, 0x02	; 2
 64c:	08 95       	ret
 64e:	83 e0       	ldi	r24, 0x03	; 3
 650:	08 95       	ret

00000652 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 652:	61 15       	cp	r22, r1
 654:	71 05       	cpc	r23, r1
 656:	29 f4       	brne	.+10     	; 0x662 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 658:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 65c:	2b 77       	andi	r18, 0x7B	; 123
 65e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	  Endpoint_ClearOUT();
	
	while (Length)
 662:	61 15       	cp	r22, r1
 664:	71 05       	cpc	r23, r1
 666:	11 f1       	breq	.+68     	; 0x6ac <Endpoint_Read_Control_Stream_LE+0x5a>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 668:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		if (Endpoint_IsSETUPReceived())
 66c:	23 fd       	sbrc	r18, 3
 66e:	24 c0       	rjmp	.+72     	; 0x6b8 <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 670:	2e b3       	in	r18, 0x1e	; 30
 672:	22 23       	and	r18, r18
 674:	19 f1       	breq	.+70     	; 0x6bc <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 676:	2e b3       	in	r18, 0x1e	; 30
 678:	25 30       	cpi	r18, 0x05	; 5
 67a:	11 f1       	breq	.+68     	; 0x6c0 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 67c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 680:	22 ff       	sbrs	r18, 2
 682:	ef cf       	rjmp	.-34     	; 0x662 <Endpoint_Read_Control_Stream_LE+0x10>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 684:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
		{
			while (Length && Endpoint_BytesInEndpoint())
 688:	22 23       	and	r18, r18
 68a:	31 f3       	breq	.-52     	; 0x658 <Endpoint_Read_Control_Stream_LE+0x6>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 68c:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 68e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 692:	fc 01       	movw	r30, r24
 694:	31 97       	sbiw	r30, 0x01	; 1
 696:	20 83       	st	Z, r18
				Length--;
 698:	61 50       	subi	r22, 0x01	; 1
 69a:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 69c:	99 f7       	brne	.-26     	; 0x684 <Endpoint_Read_Control_Stream_LE+0x32>
 69e:	dc cf       	rjmp	.-72     	; 0x658 <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6a0:	8e b3       	in	r24, 0x1e	; 30
 6a2:	88 23       	and	r24, r24
 6a4:	59 f0       	breq	.+22     	; 0x6bc <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6a6:	8e b3       	in	r24, 0x1e	; 30
 6a8:	85 30       	cpi	r24, 0x05	; 5
 6aa:	51 f0       	breq	.+20     	; 0x6c0 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 6ac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 6b0:	80 ff       	sbrs	r24, 0
 6b2:	f6 cf       	rjmp	.-20     	; 0x6a0 <Endpoint_Read_Control_Stream_LE+0x4e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	08 95       	ret
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6bc:	82 e0       	ldi	r24, 0x02	; 2
 6be:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 6c0:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 6c2:	08 95       	ret

000006c4 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 6c4:	3e d0       	rcall	.+124    	; 0x742 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 6c6:	40 d0       	rcall	.+128    	; 0x748 <USB_INT_ClearAllInterrupts>
 6c8:	1e ba       	out	0x1e, r1	; 30
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
 6ca:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <USB_ConfigurationNumber>
	USB_ConfigurationNumber  = 0;
 6ce:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 6d0:	89 bd       	out	0x29, r24	; 41
 6d2:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 6d4:	82 60       	ori	r24, 0x02	; 2
 6d6:	89 bd       	out	0x29, r24	; 41
 6d8:	09 b4       	in	r0, 0x29	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 6da:	00 fe       	sbrs	r0, 0
 6dc:	fd cf       	rjmp	.-6      	; 0x6d8 <USB_ResetInterface+0x14>
 6de:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 6e2:	98 2f       	mov	r25, r24
				
				USBCON = (Temp & ~(1 << USBE));
 6e4:	9f 77       	andi	r25, 0x7F	; 127
 6e6:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 6ea:	80 68       	ori	r24, 0x80	; 128
				USBCON = (Temp |  (1 << USBE));
 6ec:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 6f0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 6f4:	8e 7f       	andi	r24, 0xFE	; 254
 6f6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 6fa:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 6fe:	8f 7d       	andi	r24, 0xDF	; 223
 700:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 704:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 708:	8e 7f       	andi	r24, 0xFE	; 254
 70a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
 70e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 712:	8e 7f       	andi	r24, 0xFE	; 254
 714:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 718:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	USB_INT_Enable(USB_INT_SUSPEND);
 71c:	81 60       	ori	r24, 0x01	; 1
 71e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 722:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	USB_INT_Clear(USB_INT_EORSTI);
 726:	87 7f       	andi	r24, 0xF7	; 247
 728:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 72c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	USB_INT_Enable(USB_INT_EORSTI);
 730:	88 60       	ori	r24, 0x08	; 8
 732:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 736:	08 95       	ret

00000738 <USB_Init>:
 738:	c5 df       	rcall	.-118    	; 0x6c4 <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <USB_IsInitialized>
 740:	08 95       	ret

00000742 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 742:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 746:	08 95       	ret

00000748 <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 748:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 74c:	08 95       	ret

0000074e <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 74e:	1f 92       	push	r1
 750:	0f 92       	push	r0
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	0f 92       	push	r0
 756:	11 24       	eor	r1, r1
 758:	2f 93       	push	r18
 75a:	3f 93       	push	r19
 75c:	4f 93       	push	r20
 75e:	5f 93       	push	r21
 760:	6f 93       	push	r22
 762:	7f 93       	push	r23
 764:	8f 93       	push	r24
 766:	9f 93       	push	r25
 768:	af 93       	push	r26
 76a:	bf 93       	push	r27
 76c:	ef 93       	push	r30
 76e:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 770:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 774:	80 ff       	sbrs	r24, 0
 776:	1b c0       	rjmp	.+54     	; 0x7ae <__vector_11+0x60>
 778:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 77c:	80 ff       	sbrs	r24, 0
 77e:	17 c0       	rjmp	.+46     	; 0x7ae <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 780:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 784:	8e 7f       	andi	r24, 0xFE	; 254
 786:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

		USB_INT_Disable(USB_INT_SUSPEND);
 78a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 78e:	8e 7f       	andi	r24, 0xFE	; 254
 790:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Enable(USB_INT_WAKEUP);
 794:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 798:	80 61       	ori	r24, 0x10	; 16
 79a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 79e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 7a2:	80 62       	ori	r24, 0x20	; 32
 7a4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 7a8:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 7aa:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 7ac:	4f dd       	rcall	.-1378   	; 0x24c <EVENT_USB_Device_Disconnect>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 7ae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 7b2:	84 ff       	sbrs	r24, 4
 7b4:	29 c0       	rjmp	.+82     	; 0x808 <__vector_11+0xba>
 7b6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 7ba:	84 ff       	sbrs	r24, 4
 7bc:	25 c0       	rjmp	.+74     	; 0x808 <__vector_11+0xba>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 7c2:	89 b5       	in	r24, 0x29	; 41
 7c4:	82 60       	ori	r24, 0x02	; 2
 7c6:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 7c8:	09 b4       	in	r0, 0x29	; 41
 7ca:	00 fe       	sbrs	r0, 0
 7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <__vector_11+0x7a>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 7ce:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 7d2:	8f 7d       	andi	r24, 0xDF	; 223
 7d4:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 7d8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 7dc:	8f 7e       	andi	r24, 0xEF	; 239
 7de:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

		USB_INT_Disable(USB_INT_WAKEUP);
 7e2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 7e6:	8f 7e       	andi	r24, 0xEF	; 239
 7e8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Enable(USB_INT_SUSPEND);
 7ec:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 7f0:	81 60       	ori	r24, 0x01	; 1
 7f2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 7f6:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <USB_ConfigurationNumber>
 7fa:	81 11       	cpse	r24, r1
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__vector_11+0xb4>
 7fe:	81 e0       	ldi	r24, 0x01	; 1
 800:	01 c0       	rjmp	.+2      	; 0x804 <__vector_11+0xb6>
 802:	84 e0       	ldi	r24, 0x04	; 4
		EVENT_USB_Device_Connect();
 804:	8e bb       	out	0x1e, r24	; 30
 806:	21 dd       	rcall	.-1470   	; 0x24a <EVENT_USB_Device_Connect>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 808:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 80c:	83 ff       	sbrs	r24, 3
 80e:	22 c0       	rjmp	.+68     	; 0x854 <__vector_11+0x106>
 810:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 814:	83 ff       	sbrs	r24, 3
 816:	1e c0       	rjmp	.+60     	; 0x854 <__vector_11+0x106>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 818:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 81c:	87 7f       	andi	r24, 0xF7	; 247
 81e:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>

		USB_DeviceState         = DEVICE_STATE_Default;
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
 826:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <USB_ConfigurationNumber>

		USB_INT_Clear(USB_INT_SUSPEND);
 82a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 82e:	8e 7f       	andi	r24, 0xFE	; 254
 830:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		USB_INT_Disable(USB_INT_SUSPEND);
 834:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 838:	8e 7f       	andi	r24, 0xFE	; 254
 83a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Enable(USB_INT_WAKEUP);
 83e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 842:	80 61       	ori	r24, 0x10	; 16
 844:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

		Endpoint_ClearEndpoints();
 848:	c9 dd       	rcall	.-1134   	; 0x3dc <Endpoint_ClearEndpoints>
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 84a:	42 e0       	ldi	r20, 0x02	; 2
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 850:	b2 dd       	rcall	.-1180   	; 0x3b6 <Endpoint_ConfigureEndpoint_Prv>
 852:	13 d1       	rcall	.+550    	; 0xa7a <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 854:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 858:	82 ff       	sbrs	r24, 2
 85a:	0a c0       	rjmp	.+20     	; 0x870 <__vector_11+0x122>
 85c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 860:	82 ff       	sbrs	r24, 2
 862:	06 c0       	rjmp	.+12     	; 0x870 <__vector_11+0x122>
	{
		USB_INT_Clear(USB_INT_SOFI);
 864:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 868:	8b 7f       	andi	r24, 0xFB	; 251
 86a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		
		EVENT_USB_Device_StartOfFrame();
 86e:	fb dc       	rcall	.-1546   	; 0x266 <EVENT_USB_Device_StartOfFrame>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	bf 91       	pop	r27
 876:	af 91       	pop	r26
 878:	9f 91       	pop	r25
 87a:	8f 91       	pop	r24
 87c:	7f 91       	pop	r23
 87e:	6f 91       	pop	r22
 880:	5f 91       	pop	r21
 882:	4f 91       	pop	r20
 884:	3f 91       	pop	r19
 886:	2f 91       	pop	r18
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	00 d0       	rcall	.+0      	; 0x89a <USB_Device_ProcessControlRequest+0x8>
 89a:	cd b7       	in	r28, 0x3d	; 61
 89c:	de b7       	in	r29, 0x3e	; 62
 89e:	eb e9       	ldi	r30, 0x9B	; 155
 8a0:	f1 e0       	ldi	r31, 0x01	; 1
 8a2:	83 ea       	ldi	r24, 0xA3	; 163
 8a4:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 8a6:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 8aa:	21 93       	st	Z+, r18
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8ac:	8e 17       	cp	r24, r30
 8ae:	9f 07       	cpc	r25, r31
 8b0:	d1 f7       	brne	.-12     	; 0x8a6 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8b2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
	
	switch (USB_ControlRequest.bRequest)
 8b6:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <USB_ControlRequest+0x1>
 8ba:	49 2f       	mov	r20, r25
 8bc:	50 e0       	ldi	r21, 0x00	; 0
 8be:	4a 30       	cpi	r20, 0x0A	; 10
 8c0:	51 05       	cpc	r21, r1
 8c2:	08 f0       	brcs	.+2      	; 0x8c6 <USB_Device_ProcessControlRequest+0x34>
 8c4:	d2 c0       	rjmp	.+420    	; 0xa6a <USB_Device_ProcessControlRequest+0x1d8>
 8c6:	fa 01       	movw	r30, r20
 8c8:	e6 5c       	subi	r30, 0xC6	; 198
 8ca:	ff 4f       	sbci	r31, 0xFF	; 255
 8cc:	ca c2       	rjmp	.+1428   	; 0xe62 <__tablejump2__>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 8ce:	80 38       	cpi	r24, 0x80	; 128
 8d0:	09 f4       	brne	.+2      	; 0x8d4 <USB_Device_ProcessControlRequest+0x42>
 8d2:	bc c0       	rjmp	.+376    	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
 8d4:	82 38       	cpi	r24, 0x82	; 130
 8d6:	09 f0       	breq	.+2      	; 0x8da <USB_Device_ProcessControlRequest+0x48>
 8d8:	c8 c0       	rjmp	.+400    	; 0xa6a <USB_Device_ProcessControlRequest+0x1d8>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 8da:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x4>
 8de:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8e0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8e4:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 8e8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8ec:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 8f0:	97 7f       	andi	r25, 0xF7	; 247
 8f2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 8f6:	85 fb       	bst	r24, 5
 8f8:	88 27       	eor	r24, r24
 8fa:	80 f9       	bld	r24, 0
 8fc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Word >> 8);
 900:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 904:	80 c0       	rjmp	.+256    	; 0xa06 <USB_Device_ProcessControlRequest+0x174>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 906:	28 2f       	mov	r18, r24
 908:	2d 7f       	andi	r18, 0xFD	; 253
 90a:	09 f0       	breq	.+2      	; 0x90e <USB_Device_ProcessControlRequest+0x7c>
 90c:	ae c0       	rjmp	.+348    	; 0xa6a <USB_Device_ProcessControlRequest+0x1d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 90e:	82 30       	cpi	r24, 0x02	; 2
 910:	09 f0       	breq	.+2      	; 0x914 <USB_Device_ProcessControlRequest+0x82>
 912:	9c c0       	rjmp	.+312    	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 914:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 918:	81 11       	cpse	r24, r1
 91a:	27 c0       	rjmp	.+78     	; 0x96a <USB_Device_ProcessControlRequest+0xd8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 91c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <USB_ControlRequest+0x4>
 920:	87 70       	andi	r24, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 922:	09 f4       	brne	.+2      	; 0x926 <USB_Device_ProcessControlRequest+0x94>
 924:	93 c0       	rjmp	.+294    	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 926:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 92a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 92e:	20 ff       	sbrs	r18, 0
 930:	8d c0       	rjmp	.+282    	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 932:	93 30       	cpi	r25, 0x03	; 3
 934:	21 f4       	brne	.+8      	; 0x93e <USB_Device_ProcessControlRequest+0xac>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 936:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 93a:	80 62       	ori	r24, 0x20	; 32
 93c:	14 c0       	rjmp	.+40     	; 0x966 <USB_Device_ProcessControlRequest+0xd4>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 93e:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 942:	90 61       	ori	r25, 0x10	; 16
 944:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 948:	21 e0       	ldi	r18, 0x01	; 1
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	a9 01       	movw	r20, r18
 94e:	02 c0       	rjmp	.+4      	; 0x954 <USB_Device_ProcessControlRequest+0xc2>
 950:	44 0f       	add	r20, r20
 952:	55 1f       	adc	r21, r21
 954:	8a 95       	dec	r24
 956:	e2 f7       	brpl	.-8      	; 0x950 <USB_Device_ProcessControlRequest+0xbe>
 958:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
				UERST = 0;
 95c:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 960:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 964:	88 60       	ori	r24, 0x08	; 8
 966:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 96a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 96e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 972:	87 7f       	andi	r24, 0xF7	; 247
 974:	4b c0       	rjmp	.+150    	; 0xa0c <USB_Device_ProcessControlRequest+0x17a>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 976:	81 11       	cpse	r24, r1
 978:	78 c0       	rjmp	.+240    	; 0xa6a <USB_Device_ProcessControlRequest+0x1d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 97a:	10 91 9d 01 	lds	r17, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 97e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 982:	87 7f       	andi	r24, 0xF7	; 247
 984:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 988:	3d dd       	rcall	.-1414   	; 0x404 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 98a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	
	while (!(Endpoint_IsINReady()))
 98e:	80 fd       	sbrc	r24, 0
 990:	04 c0       	rjmp	.+8      	; 0x99a <USB_Device_ProcessControlRequest+0x108>
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 992:	8e b3       	in	r24, 0x1e	; 30
 994:	81 11       	cpse	r24, r1
 996:	f9 cf       	rjmp	.-14     	; 0x98a <USB_Device_ProcessControlRequest+0xf8>
 998:	59 c0       	rjmp	.+178    	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 99a:	81 2f       	mov	r24, r17
 99c:	8f 77       	andi	r24, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 99e:	11 f4       	brne	.+4      	; 0x9a4 <USB_Device_ProcessControlRequest+0x112>
 9a0:	92 e0       	ldi	r25, 0x02	; 2
 9a2:	01 c0       	rjmp	.+2      	; 0x9a6 <USB_Device_ProcessControlRequest+0x114>
 9a4:	93 e0       	ldi	r25, 0x03	; 3
 9a6:	9e bb       	out	0x1e, r25	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 9a8:	80 68       	ori	r24, 0x80	; 128
 9aa:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 9ae:	4e c0       	rjmp	.+156    	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9b0:	80 58       	subi	r24, 0x80	; 128
 9b2:	82 30       	cpi	r24, 0x02	; 2
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <USB_Device_ProcessControlRequest+0x126>
 9b6:	59 c0       	rjmp	.+178    	; 0xa6a <USB_Device_ProcessControlRequest+0x1d8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 9b8:	ae 01       	movw	r20, r28
 9ba:	4f 5f       	subi	r20, 0xFF	; 255
 9bc:	5f 4f       	sbci	r21, 0xFF	; 255
 9be:	60 91 9f 01 	lds	r22, 0x019F	; 0x80019f <USB_ControlRequest+0x4>
 9c2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 9c6:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <USB_ControlRequest+0x3>
 9ca:	a6 dc       	rcall	.-1716   	; 0x318 <CALLBACK_USB_GetDescriptor>
 9cc:	bc 01       	movw	r22, r24
 9ce:	89 2b       	or	r24, r25
 9d0:	09 f4       	brne	.+2      	; 0x9d4 <USB_Device_ProcessControlRequest+0x142>
 9d2:	3c c0       	rjmp	.+120    	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9d4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 9d8:	97 7f       	andi	r25, 0xF7	; 247
 9da:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 9de:	89 81       	ldd	r24, Y+1	; 0x01
 9e0:	9a 81       	ldd	r25, Y+2	; 0x02
 9e2:	e0 dd       	rcall	.-1088   	; 0x5a4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 9e4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 9e8:	8b 77       	andi	r24, 0x7B	; 123
 9ea:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 9ee:	2e c0       	rjmp	.+92     	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 9f0:	80 38       	cpi	r24, 0x80	; 128
 9f2:	d9 f5       	brne	.+118    	; 0xa6a <USB_Device_ProcessControlRequest+0x1d8>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 9f8:	87 7f       	andi	r24, 0xF7	; 247
 9fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 9fe:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <USB_ConfigurationNumber>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a02:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a0a:	8e 77       	andi	r24, 0x7E	; 126
 a0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a10:	f9 dc       	rcall	.-1550   	; 0x404 <Endpoint_ClearStatusStage>
 a12:	1c c0       	rjmp	.+56     	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a14:	81 11       	cpse	r24, r1
 a16:	29 c0       	rjmp	.+82     	; 0xa6a <USB_Device_ProcessControlRequest+0x1d8>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a18:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 a1c:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <USB_ControlRequest+0x3>
 a20:	99 27       	eor	r25, r25
 a22:	02 97       	sbiw	r24, 0x02	; 2
 a24:	9c f4       	brge	.+38     	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a2a:	87 7f       	andi	r24, 0xF7	; 247
 a2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a30:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 a34:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <USB_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 a38:	e5 dc       	rcall	.-1590   	; 0x404 <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 a3a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <USB_ConfigurationNumber>
 a3e:	81 11       	cpse	r24, r1
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <USB_Device_ProcessControlRequest+0x1b4>
 a42:	83 e0       	ldi	r24, 0x03	; 3
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <USB_Device_ProcessControlRequest+0x1b6>
 a46:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
 a48:	8e bb       	out	0x1e, r24	; 30
 a4a:	01 dc       	rcall	.-2046   	; 0x24e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
 a50:	83 ff       	sbrs	r24, 3
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <USB_Device_ProcessControlRequest+0x1dc>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a54:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 a58:	80 62       	ori	r24, 0x20	; 32
 a5a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 a62:	87 7f       	andi	r24, 0xF7	; 247
 a64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <USB_Device_ProcessControlRequest+0x1dc>
 a6a:	fa db       	rcall	.-2060   	; 0x260 <EVENT_USB_Device_UnhandledControlRequest>
 a6c:	ef cf       	rjmp	.-34     	; 0xa4c <USB_Device_ProcessControlRequest+0x1ba>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	08 95       	ret

00000a7a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 a7a:	08 95       	ret

00000a7c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 a7c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 a7e:	8e b3       	in	r24, 0x1e	; 30
 a80:	88 23       	and	r24, r24
 a82:	59 f0       	breq	.+22     	; 0xa9a <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 a84:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 a88:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a8a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 a92:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 a94:	fe de       	rcall	.-516    	; 0x892 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 a96:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 a9a:	cf 91       	pop	r28
 a9c:	08 95       	ret

00000a9e <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 a9e:	8f 92       	push	r8
 aa0:	9f 92       	push	r9
 aa2:	af 92       	push	r10
 aa4:	bf 92       	push	r11
 aa6:	cf 92       	push	r12
 aa8:	df 92       	push	r13
 aaa:	ef 92       	push	r14
 aac:	ff 92       	push	r15
 aae:	0f 93       	push	r16
 ab0:	1f 93       	push	r17
 ab2:	cf 93       	push	r28
 ab4:	df 93       	push	r29
 ab6:	00 d0       	rcall	.+0      	; 0xab8 <HID_Device_ProcessControlRequest+0x1a>
 ab8:	1f 92       	push	r1
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
 abe:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 ac0:	cd b6       	in	r12, 0x3d	; 61
 ac2:	de b6       	in	r13, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ac4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 ac8:	83 ff       	sbrs	r24, 3
 aca:	ef c0       	rjmp	.+478    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 acc:	f7 01       	movw	r30, r14
 ace:	80 81       	ld	r24, Z
 ad0:	90 e0       	ldi	r25, 0x00	; 0
 ad2:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <USB_ControlRequest+0x4>
 ad6:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <USB_ControlRequest+0x5>
 ada:	28 17       	cp	r18, r24
 adc:	39 07       	cpc	r19, r25
 ade:	09 f0       	breq	.+2      	; 0xae2 <HID_Device_ProcessControlRequest+0x44>
 ae0:	e4 c0       	rjmp	.+456    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
	  return;

	switch (USB_ControlRequest.bRequest)
 ae2:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <USB_ControlRequest+0x1>
 ae6:	83 30       	cpi	r24, 0x03	; 3
 ae8:	09 f4       	brne	.+2      	; 0xaec <HID_Device_ProcessControlRequest+0x4e>
 aea:	91 c0       	rjmp	.+290    	; 0xc0e <HID_Device_ProcessControlRequest+0x170>
 aec:	30 f4       	brcc	.+12     	; 0xafa <HID_Device_ProcessControlRequest+0x5c>
 aee:	81 30       	cpi	r24, 0x01	; 1
 af0:	71 f0       	breq	.+28     	; 0xb0e <HID_Device_ProcessControlRequest+0x70>
 af2:	82 30       	cpi	r24, 0x02	; 2
 af4:	09 f4       	brne	.+2      	; 0xaf8 <HID_Device_ProcessControlRequest+0x5a>
 af6:	c1 c0       	rjmp	.+386    	; 0xc7a <HID_Device_ProcessControlRequest+0x1dc>
 af8:	d8 c0       	rjmp	.+432    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
 afa:	8a 30       	cpi	r24, 0x0A	; 10
 afc:	09 f4       	brne	.+2      	; 0xb00 <HID_Device_ProcessControlRequest+0x62>
 afe:	a6 c0       	rjmp	.+332    	; 0xc4c <HID_Device_ProcessControlRequest+0x1ae>
 b00:	8b 30       	cpi	r24, 0x0B	; 11
 b02:	09 f4       	brne	.+2      	; 0xb06 <HID_Device_ProcessControlRequest+0x68>
 b04:	91 c0       	rjmp	.+290    	; 0xc28 <HID_Device_ProcessControlRequest+0x18a>
 b06:	89 30       	cpi	r24, 0x09	; 9
 b08:	09 f0       	breq	.+2      	; 0xb0c <HID_Device_ProcessControlRequest+0x6e>
 b0a:	cf c0       	rjmp	.+414    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
 b0c:	4d c0       	rjmp	.+154    	; 0xba8 <HID_Device_ProcessControlRequest+0x10a>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 b0e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
 b12:	81 3a       	cpi	r24, 0xA1	; 161
 b14:	09 f0       	breq	.+2      	; 0xb18 <HID_Device_ProcessControlRequest+0x7a>
 b16:	c9 c0       	rjmp	.+402    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
			{
 b18:	8d b6       	in	r8, 0x3d	; 61
 b1a:	9e b6       	in	r9, 0x3e	; 62
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 b20:	87 7f       	andi	r24, 0xF7	; 247
 b22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
 b26:	1a 82       	std	Y+2, r1	; 0x02
 b28:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 b2a:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 b2e:	10 91 9e 01 	lds	r17, 0x019E	; 0x80019e <USB_ControlRequest+0x3>
 b32:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 b34:	f7 01       	movw	r30, r14
 b36:	87 81       	ldd	r24, Z+7	; 0x07
 b38:	48 2f       	mov	r20, r24
 b3a:	50 e0       	ldi	r21, 0x00	; 0
 b3c:	8d b7       	in	r24, 0x3d	; 61
 b3e:	9e b7       	in	r25, 0x3e	; 62
 b40:	84 1b       	sub	r24, r20
 b42:	95 0b       	sbc	r25, r21
 b44:	0f b6       	in	r0, 0x3f	; 63
 b46:	f8 94       	cli
 b48:	9e bf       	out	0x3e, r25	; 62
 b4a:	0f be       	out	0x3f, r0	; 63
 b4c:	8d bf       	out	0x3d, r24	; 61
 b4e:	ed b7       	in	r30, 0x3d	; 61
 b50:	fe b7       	in	r31, 0x3e	; 62
 b52:	31 96       	adiw	r30, 0x01	; 1
 b54:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
 b56:	60 e0       	ldi	r22, 0x00	; 0
 b58:	70 e0       	ldi	r23, 0x00	; 0
 b5a:	cf 01       	movw	r24, r30
 b5c:	9e d1       	rcall	.+828    	; 0xe9a <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 b5e:	4f ef       	ldi	r20, 0xFF	; 255
 b60:	41 0f       	add	r20, r17
 b62:	8e 01       	movw	r16, r28
 b64:	0f 5f       	subi	r16, 0xFF	; 255
 b66:	1f 4f       	sbci	r17, 0xFF	; 255
 b68:	95 01       	movw	r18, r10
 b6a:	be 01       	movw	r22, r28
 b6c:	6d 5f       	subi	r22, 0xFD	; 253
 b6e:	7f 4f       	sbci	r23, 0xFF	; 255
 b70:	c7 01       	movw	r24, r14
 b72:	85 db       	rcall	.-2294   	; 0x27e <CALLBACK_HID_Device_CreateHIDReport>
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 b74:	f7 01       	movw	r30, r14
 b76:	85 81       	ldd	r24, Z+5	; 0x05
 b78:	96 81       	ldd	r25, Z+6	; 0x06
 b7a:	00 97       	sbiw	r24, 0x00	; 0
 b7c:	21 f0       	breq	.+8      	; 0xb86 <HID_Device_ProcessControlRequest+0xe8>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 b7e:	47 81       	ldd	r20, Z+7	; 0x07
 b80:	50 e0       	ldi	r21, 0x00	; 0
 b82:	b5 01       	movw	r22, r10
 b84:	81 d1       	rcall	.+770    	; 0xe88 <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 b86:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 b8a:	69 81       	ldd	r22, Y+1	; 0x01
 b8c:	7a 81       	ldd	r23, Y+2	; 0x02
 b8e:	c5 01       	movw	r24, r10
 b90:	b3 dc       	rcall	.-1690   	; 0x4f8 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 b92:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 b96:	8b 77       	andi	r24, 0x7B	; 123
 b98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 b9c:	0f b6       	in	r0, 0x3f	; 63
 b9e:	f8 94       	cli
 ba0:	9e be       	out	0x3e, r9	; 62
 ba2:	0f be       	out	0x3f, r0	; 63
 ba4:	8d be       	out	0x3d, r8	; 61
 ba6:	81 c0       	rjmp	.+258    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ba8:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
 bac:	81 32       	cpi	r24, 0x21	; 33
 bae:	09 f0       	breq	.+2      	; 0xbb2 <HID_Device_ProcessControlRequest+0x114>
 bb0:	7c c0       	rjmp	.+248    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 bb6:	87 7f       	andi	r24, 0xF7	; 247
 bb8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 bbc:	00 91 a1 01 	lds	r16, 0x01A1	; 0x8001a1 <USB_ControlRequest+0x6>
 bc0:	10 91 a2 01 	lds	r17, 0x01A2	; 0x8001a2 <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 bc4:	a0 90 9d 01 	lds	r10, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 bc8:	b0 90 9e 01 	lds	r11, 0x019E	; 0x80019e <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 bcc:	8d b7       	in	r24, 0x3d	; 61
 bce:	9e b7       	in	r25, 0x3e	; 62
 bd0:	80 1b       	sub	r24, r16
 bd2:	91 0b       	sbc	r25, r17
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	9e bf       	out	0x3e, r25	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	8d bf       	out	0x3d, r24	; 61
 bde:	ed b7       	in	r30, 0x3d	; 61
 be0:	fe b7       	in	r31, 0x3e	; 62
 be2:	31 96       	adiw	r30, 0x01	; 1

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 be4:	4f 01       	movw	r8, r30
 be6:	b8 01       	movw	r22, r16
 be8:	cf 01       	movw	r24, r30
 bea:	33 dd       	rcall	.-1434   	; 0x652 <Endpoint_Read_Control_Stream_LE>
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 bec:	4f ef       	ldi	r20, 0xFF	; 255
 bee:	4b 0d       	add	r20, r11
 bf0:	94 01       	movw	r18, r8
 bf2:	6a 2d       	mov	r22, r10
 bf4:	c7 01       	movw	r24, r14
 bf6:	58 db       	rcall	.-2384   	; 0x2a8 <CALLBACK_HID_Device_ProcessHIDReport>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 bf8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 bfc:	8e 77       	andi	r24, 0x7E	; 126
 bfe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c02:	0f b6       	in	r0, 0x3f	; 63
 c04:	f8 94       	cli
 c06:	de be       	out	0x3e, r13	; 62
 c08:	0f be       	out	0x3f, r0	; 63
 c0a:	cd be       	out	0x3d, r12	; 61
 c0c:	4e c0       	rjmp	.+156    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c0e:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
 c12:	81 3a       	cpi	r24, 0xA1	; 161
 c14:	09 f0       	breq	.+2      	; 0xc18 <HID_Device_ProcessControlRequest+0x17a>
 c16:	49 c0       	rjmp	.+146    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c18:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c1c:	87 7f       	andi	r24, 0xF7	; 247
 c1e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 c22:	f7 01       	movw	r30, r14
 c24:	80 85       	ldd	r24, Z+8	; 0x08
 c26:	39 c0       	rjmp	.+114    	; 0xc9a <HID_Device_ProcessControlRequest+0x1fc>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c28:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
 c2c:	81 32       	cpi	r24, 0x21	; 33
 c2e:	e9 f5       	brne	.+122    	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
 c30:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c34:	87 7f       	andi	r24, 0xF7	; 247
 c36:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 c3a:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 c3e:	81 e0       	ldi	r24, 0x01	; 1
 c40:	91 11       	cpse	r25, r1
 c42:	01 c0       	rjmp	.+2      	; 0xc46 <HID_Device_ProcessControlRequest+0x1a8>
 c44:	80 e0       	ldi	r24, 0x00	; 0
 c46:	f7 01       	movw	r30, r14
 c48:	80 87       	std	Z+8, r24	; 0x08
 c4a:	2e c0       	rjmp	.+92     	; 0xca8 <HID_Device_ProcessControlRequest+0x20a>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c4c:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
 c50:	81 32       	cpi	r24, 0x21	; 33
 c52:	59 f5       	brne	.+86     	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
 c54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c58:	87 7f       	andi	r24, 0xF7	; 247
 c5a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 c5e:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <USB_ControlRequest+0x2>
 c62:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <USB_ControlRequest+0x3>
 c66:	88 27       	eor	r24, r24
 c68:	36 e0       	ldi	r19, 0x06	; 6
 c6a:	96 95       	lsr	r25
 c6c:	87 95       	ror	r24
 c6e:	3a 95       	dec	r19
 c70:	e1 f7       	brne	.-8      	; 0xc6a <HID_Device_ProcessControlRequest+0x1cc>
 c72:	f7 01       	movw	r30, r14
 c74:	92 87       	std	Z+10, r25	; 0x0a
 c76:	81 87       	std	Z+9, r24	; 0x09
 c78:	17 c0       	rjmp	.+46     	; 0xca8 <HID_Device_ProcessControlRequest+0x20a>
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c7a:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <USB_ControlRequest>
 c7e:	81 3a       	cpi	r24, 0xA1	; 161
 c80:	a1 f4       	brne	.+40     	; 0xcaa <HID_Device_ProcessControlRequest+0x20c>
 c82:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c86:	87 7f       	andi	r24, 0xF7	; 247
 c88:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 c8c:	f7 01       	movw	r30, r14
 c8e:	81 85       	ldd	r24, Z+9	; 0x09
 c90:	92 85       	ldd	r25, Z+10	; 0x0a
 c92:	96 95       	lsr	r25
 c94:	87 95       	ror	r24
 c96:	96 95       	lsr	r25
 c98:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 c9a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c9e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 ca2:	8e 77       	andi	r24, 0x7E	; 126
 ca4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 ca8:	ad db       	rcall	.-2214   	; 0x404 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 caa:	0f b6       	in	r0, 0x3f	; 63
 cac:	f8 94       	cli
 cae:	de be       	out	0x3e, r13	; 62
 cb0:	0f be       	out	0x3f, r0	; 63
 cb2:	cd be       	out	0x3d, r12	; 61
 cb4:	0f 90       	pop	r0
 cb6:	0f 90       	pop	r0
 cb8:	0f 90       	pop	r0
 cba:	df 91       	pop	r29
 cbc:	cf 91       	pop	r28
 cbe:	1f 91       	pop	r17
 cc0:	0f 91       	pop	r16
 cc2:	ff 90       	pop	r15
 cc4:	ef 90       	pop	r14
 cc6:	df 90       	pop	r13
 cc8:	cf 90       	pop	r12
 cca:	bf 90       	pop	r11
 ccc:	af 90       	pop	r10
 cce:	9f 90       	pop	r9
 cd0:	8f 90       	pop	r8
 cd2:	08 95       	ret

00000cd4 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
 cd8:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 cda:	dc 01       	movw	r26, r24
 cdc:	18 96       	adiw	r26, 0x08	; 8
 cde:	85 e0       	ldi	r24, 0x05	; 5
 ce0:	ed 01       	movw	r28, r26
 ce2:	19 92       	st	Y+, r1
 ce4:	8a 95       	dec	r24
 ce6:	e9 f7       	brne	.-6      	; 0xce2 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 ce8:	81 e0       	ldi	r24, 0x01	; 1
 cea:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount = 500;
 cec:	84 ef       	ldi	r24, 0xF4	; 244
 cee:	91 e0       	ldi	r25, 0x01	; 1
 cf0:	92 87       	std	Z+10, r25	; 0x0a
 cf2:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 cf4:	82 81       	ldd	r24, Z+2	; 0x02
 cf6:	93 81       	ldd	r25, Z+3	; 0x03
 cf8:	24 81       	ldd	r18, Z+4	; 0x04
 cfa:	21 11       	cpse	r18, r1
 cfc:	02 c0       	rjmp	.+4      	; 0xd02 <HID_Device_ConfigureEndpoints+0x2e>
 cfe:	c0 e0       	ldi	r28, 0x00	; 0
 d00:	01 c0       	rjmp	.+2      	; 0xd04 <HID_Device_ConfigureEndpoints+0x30>
 d02:	c4 e0       	ldi	r28, 0x04	; 4
 d04:	d1 81       	ldd	r29, Z+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d06:	49 db       	rcall	.-2414   	; 0x39a <Endpoint_BytesToEPSizeMaskDynamic>
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d08:	8c 2b       	or	r24, r28
 d0a:	48 2f       	mov	r20, r24
 d0c:	42 60       	ori	r20, 0x02	; 2
 d0e:	61 ec       	ldi	r22, 0xC1	; 193
 d10:	8d 2f       	mov	r24, r29
	{
		return false;
	}
	
	return true;
}
 d12:	df 91       	pop	r29
 d14:	cf 91       	pop	r28
 d16:	4f cb       	rjmp	.-2402   	; 0x3b6 <Endpoint_ConfigureEndpoint_Prv>

00000d18 <HID_Device_USBTask>:
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 d18:	5f 92       	push	r5
 d1a:	6f 92       	push	r6
 d1c:	7f 92       	push	r7
 d1e:	8f 92       	push	r8
 d20:	9f 92       	push	r9
 d22:	af 92       	push	r10
 d24:	bf 92       	push	r11
 d26:	cf 92       	push	r12
 d28:	df 92       	push	r13
 d2a:	ef 92       	push	r14
 d2c:	ff 92       	push	r15
 d2e:	0f 93       	push	r16
 d30:	1f 93       	push	r17
 d32:	cf 93       	push	r28
 d34:	df 93       	push	r29
 d36:	00 d0       	rcall	.+0      	; 0xd38 <HID_Device_USBTask+0x20>
 d38:	1f 92       	push	r1
 d3a:	cd b7       	in	r28, 0x3d	; 61
 d3c:	de b7       	in	r29, 0x3e	; 62
 d3e:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
 d40:	ad b6       	in	r10, 0x3d	; 61
 d42:	be b6       	in	r11, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d44:	8e b3       	in	r24, 0x1e	; 30
 d46:	84 30       	cpi	r24, 0x04	; 4
 d48:	09 f0       	breq	.+2      	; 0xd4c <HID_Device_USBTask+0x34>
 d4a:	73 c0       	rjmp	.+230    	; 0xe32 <HID_Device_USBTask+0x11a>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 d4c:	f7 01       	movw	r30, r14
 d4e:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d50:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d54:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	
	if (Endpoint_IsReadWriteAllowed())
 d58:	85 ff       	sbrs	r24, 5
 d5a:	6b c0       	rjmp	.+214    	; 0xe32 <HID_Device_USBTask+0x11a>
	{
 d5c:	8d b6       	in	r8, 0x3d	; 61
 d5e:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 d60:	47 81       	ldd	r20, Z+7	; 0x07
 d62:	50 e0       	ldi	r21, 0x00	; 0
 d64:	8d b7       	in	r24, 0x3d	; 61
 d66:	9e b7       	in	r25, 0x3e	; 62
 d68:	84 1b       	sub	r24, r20
 d6a:	95 0b       	sbc	r25, r21
 d6c:	0f b6       	in	r0, 0x3f	; 63
 d6e:	f8 94       	cli
 d70:	9e bf       	out	0x3e, r25	; 62
 d72:	0f be       	out	0x3f, r0	; 63
 d74:	8d bf       	out	0x3d, r24	; 61
 d76:	ed b7       	in	r30, 0x3d	; 61
 d78:	fe b7       	in	r31, 0x3e	; 62
 d7a:	31 96       	adiw	r30, 0x01	; 1
 d7c:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 d7e:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 d80:	1a 82       	std	Y+2, r1	; 0x02
 d82:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 d84:	60 e0       	ldi	r22, 0x00	; 0
 d86:	70 e0       	ldi	r23, 0x00	; 0
 d88:	cf 01       	movw	r24, r30
 d8a:	87 d0       	rcall	.+270    	; 0xe9a <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
 d8c:	8e 01       	movw	r16, r28
 d8e:	0f 5f       	subi	r16, 0xFF	; 255
 d90:	1f 4f       	sbci	r17, 0xFF	; 255
 d92:	96 01       	movw	r18, r12
 d94:	40 e0       	ldi	r20, 0x00	; 0
 d96:	be 01       	movw	r22, r28
 d98:	6d 5f       	subi	r22, 0xFD	; 253
 d9a:	7f 4f       	sbci	r23, 0xFF	; 255
 d9c:	c7 01       	movw	r24, r14
 d9e:	6f da       	rcall	.-2850   	; 0x27e <CALLBACK_HID_Device_CreateHIDReport>
 da0:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 da2:	f7 01       	movw	r30, r14
 da4:	81 85       	ldd	r24, Z+9	; 0x09
 da6:	92 85       	ldd	r25, Z+10	; 0x0a
 da8:	89 2b       	or	r24, r25
 daa:	29 f0       	breq	.+10     	; 0xdb6 <HID_Device_USBTask+0x9e>
 dac:	11 e0       	ldi	r17, 0x01	; 1
 dae:	83 85       	ldd	r24, Z+11	; 0x0b
 db0:	94 85       	ldd	r25, Z+12	; 0x0c
 db2:	89 2b       	or	r24, r25
 db4:	09 f0       	breq	.+2      	; 0xdb8 <HID_Device_USBTask+0xa0>
 db6:	10 e0       	ldi	r17, 0x00	; 0
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 db8:	f7 01       	movw	r30, r14
 dba:	65 80       	ldd	r6, Z+5	; 0x05
 dbc:	76 80       	ldd	r7, Z+6	; 0x06
 dbe:	61 14       	cp	r6, r1
 dc0:	71 04       	cpc	r7, r1
 dc2:	81 f0       	breq	.+32     	; 0xde4 <HID_Device_USBTask+0xcc>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 dc4:	49 81       	ldd	r20, Y+1	; 0x01
 dc6:	5a 81       	ldd	r21, Y+2	; 0x02
 dc8:	b3 01       	movw	r22, r6
 dca:	c6 01       	movw	r24, r12
 dcc:	50 d0       	rcall	.+160    	; 0xe6e <memcmp>
 dce:	01 e0       	ldi	r16, 0x01	; 1
 dd0:	89 2b       	or	r24, r25
 dd2:	09 f4       	brne	.+2      	; 0xdd6 <HID_Device_USBTask+0xbe>
 dd4:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 dd6:	f7 01       	movw	r30, r14
 dd8:	47 81       	ldd	r20, Z+7	; 0x07
 dda:	50 e0       	ldi	r21, 0x00	; 0
 ddc:	b6 01       	movw	r22, r12
 dde:	c3 01       	movw	r24, r6
 de0:	53 d0       	rcall	.+166    	; 0xe88 <memcpy>
 de2:	01 c0       	rjmp	.+2      	; 0xde6 <HID_Device_USBTask+0xce>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 de4:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 de6:	89 81       	ldd	r24, Y+1	; 0x01
 de8:	9a 81       	ldd	r25, Y+2	; 0x02
 dea:	89 2b       	or	r24, r25
 dec:	e9 f0       	breq	.+58     	; 0xe28 <HID_Device_USBTask+0x110>
 dee:	51 10       	cpse	r5, r1
 df0:	04 c0       	rjmp	.+8      	; 0xdfa <HID_Device_USBTask+0xe2>
 df2:	01 11       	cpse	r16, r1
 df4:	02 c0       	rjmp	.+4      	; 0xdfa <HID_Device_USBTask+0xe2>
 df6:	10 ff       	sbrs	r17, 0
 df8:	17 c0       	rjmp	.+46     	; 0xe28 <HID_Device_USBTask+0x110>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 dfa:	f7 01       	movw	r30, r14
 dfc:	81 85       	ldd	r24, Z+9	; 0x09
 dfe:	92 85       	ldd	r25, Z+10	; 0x0a
 e00:	94 87       	std	Z+12, r25	; 0x0c
 e02:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e04:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e06:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>

			if (ReportID)
 e0a:	8b 81       	ldd	r24, Y+3	; 0x03
 e0c:	81 11       	cpse	r24, r1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 e0e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 e12:	69 81       	ldd	r22, Y+1	; 0x01
 e14:	7a 81       	ldd	r23, Y+2	; 0x02
 e16:	40 e0       	ldi	r20, 0x00	; 0
 e18:	50 e0       	ldi	r21, 0x00	; 0
 e1a:	c6 01       	movw	r24, r12
 e1c:	3d db       	rcall	.-2438   	; 0x498 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e1e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 e22:	8e 77       	andi	r24, 0x7E	; 126
 e24:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 e28:	0f b6       	in	r0, 0x3f	; 63
 e2a:	f8 94       	cli
 e2c:	9e be       	out	0x3e, r9	; 62
 e2e:	0f be       	out	0x3f, r0	; 63
 e30:	8d be       	out	0x3d, r8	; 61
			
			Endpoint_ClearIN();
		}
	}
}
 e32:	0f b6       	in	r0, 0x3f	; 63
 e34:	f8 94       	cli
 e36:	be be       	out	0x3e, r11	; 62
 e38:	0f be       	out	0x3f, r0	; 63
 e3a:	ad be       	out	0x3d, r10	; 61
 e3c:	0f 90       	pop	r0
 e3e:	0f 90       	pop	r0
 e40:	0f 90       	pop	r0
 e42:	df 91       	pop	r29
 e44:	cf 91       	pop	r28
 e46:	1f 91       	pop	r17
 e48:	0f 91       	pop	r16
 e4a:	ff 90       	pop	r15
 e4c:	ef 90       	pop	r14
 e4e:	df 90       	pop	r13
 e50:	cf 90       	pop	r12
 e52:	bf 90       	pop	r11
 e54:	af 90       	pop	r10
 e56:	9f 90       	pop	r9
 e58:	8f 90       	pop	r8
 e5a:	7f 90       	pop	r7
 e5c:	6f 90       	pop	r6
 e5e:	5f 90       	pop	r5
 e60:	08 95       	ret

00000e62 <__tablejump2__>:
 e62:	ee 0f       	add	r30, r30
 e64:	ff 1f       	adc	r31, r31
 e66:	05 90       	lpm	r0, Z+
 e68:	f4 91       	lpm	r31, Z
 e6a:	e0 2d       	mov	r30, r0
 e6c:	09 94       	ijmp

00000e6e <memcmp>:
 e6e:	fb 01       	movw	r30, r22
 e70:	dc 01       	movw	r26, r24
 e72:	04 c0       	rjmp	.+8      	; 0xe7c <memcmp+0xe>
 e74:	8d 91       	ld	r24, X+
 e76:	01 90       	ld	r0, Z+
 e78:	80 19       	sub	r24, r0
 e7a:	21 f4       	brne	.+8      	; 0xe84 <memcmp+0x16>
 e7c:	41 50       	subi	r20, 0x01	; 1
 e7e:	50 40       	sbci	r21, 0x00	; 0
 e80:	c8 f7       	brcc	.-14     	; 0xe74 <memcmp+0x6>
 e82:	88 1b       	sub	r24, r24
 e84:	99 0b       	sbc	r25, r25
 e86:	08 95       	ret

00000e88 <memcpy>:
 e88:	fb 01       	movw	r30, r22
 e8a:	dc 01       	movw	r26, r24
 e8c:	02 c0       	rjmp	.+4      	; 0xe92 <memcpy+0xa>
 e8e:	01 90       	ld	r0, Z+
 e90:	0d 92       	st	X+, r0
 e92:	41 50       	subi	r20, 0x01	; 1
 e94:	50 40       	sbci	r21, 0x00	; 0
 e96:	d8 f7       	brcc	.-10     	; 0xe8e <memcpy+0x6>
 e98:	08 95       	ret

00000e9a <memset>:
 e9a:	dc 01       	movw	r26, r24
 e9c:	01 c0       	rjmp	.+2      	; 0xea0 <memset+0x6>
 e9e:	6d 93       	st	X+, r22
 ea0:	41 50       	subi	r20, 0x01	; 1
 ea2:	50 40       	sbci	r21, 0x00	; 0
 ea4:	e0 f7       	brcc	.-8      	; 0xe9e <memset+0x4>
 ea6:	08 95       	ret

00000ea8 <_exit>:
 ea8:	f8 94       	cli

00000eaa <__stop_program>:
 eaa:	ff cf       	rjmp	.-2      	; 0xeaa <__stop_program>
