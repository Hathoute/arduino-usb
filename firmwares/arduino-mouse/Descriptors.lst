   1               		.file	"Descriptors.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.CALLBACK_USB_GetDescriptor,"ax",@progbits
  11               	.global	CALLBACK_USB_GetDescriptor
  13               	CALLBACK_USB_GetDescriptor:
  14               	.LFB66:
  15               		.file 1 "Descriptors.c"
   1:Descriptors.c **** /*
   2:Descriptors.c ****              LUFA Library
   3:Descriptors.c ****      Copyright (C) Dean Camera, 2010.
   4:Descriptors.c ****               
   5:Descriptors.c ****   dean [at] fourwalledcubicle [dot] com
   6:Descriptors.c ****       www.fourwalledcubicle.com
   7:Descriptors.c **** */
   8:Descriptors.c **** 
   9:Descriptors.c **** /*
  10:Descriptors.c ****   Copyright 2010  Dean Camera (dean [at] fourwalledcubicle [dot] com)
  11:Descriptors.c **** 
  12:Descriptors.c ****   Permission to use, copy, modify, distribute, and sell this 
  13:Descriptors.c ****   software and its documentation for any purpose is hereby granted
  14:Descriptors.c ****   without fee, provided that the above copyright notice appear in 
  15:Descriptors.c ****   all copies and that both that the copyright notice and this
  16:Descriptors.c ****   permission notice and warranty disclaimer appear in supporting 
  17:Descriptors.c ****   documentation, and that the name of the author not be used in 
  18:Descriptors.c ****   advertising or publicity pertaining to distribution of the 
  19:Descriptors.c ****   software without specific, written prior permission.
  20:Descriptors.c **** 
  21:Descriptors.c ****   The author disclaim all warranties with regard to this
  22:Descriptors.c ****   software, including all implied warranties of merchantability
  23:Descriptors.c ****   and fitness.  In no event shall the author be liable for any
  24:Descriptors.c ****   special, indirect or consequential damages or any damages
  25:Descriptors.c ****   whatsoever resulting from loss of use, data or profits, whether
  26:Descriptors.c ****   in an action of contract, negligence or other tortious action,
  27:Descriptors.c ****   arising out of or in connection with the use or performance of
  28:Descriptors.c ****   this software.
  29:Descriptors.c **** */
  30:Descriptors.c **** 
  31:Descriptors.c **** /** \file
  32:Descriptors.c ****  *
  33:Descriptors.c ****  *  USB Device Descriptors, for library use when in USB device mode. Descriptors are special 
  34:Descriptors.c ****  *  computer-readable structures which the host requests upon device enumeration, to determine
  35:Descriptors.c ****  *  the device's capabilities and functions.  
  36:Descriptors.c ****  */
  37:Descriptors.c **** 
  38:Descriptors.c **** #include "Descriptors.h"
  39:Descriptors.c **** 
  40:Descriptors.c **** /** HID class report descriptor. This is a special descriptor constructed with values from the
  41:Descriptors.c ****  *  USBIF HID class specification to describe the reports and capabilities of the HID device. This
  42:Descriptors.c ****  *  descriptor is parsed by the host and its contents used to determine what data (and in what enco
  43:Descriptors.c ****  *  the device will send, and what it may be sent back from the host. Refer to the HID specificatio
  44:Descriptors.c ****  *  more details on HID report descriptors.
  45:Descriptors.c ****  */
  46:Descriptors.c **** const USB_Descriptor_HIDReport_Datatype_t PROGMEM MouseReport[] =
  47:Descriptors.c **** {
  48:Descriptors.c **** 	0x05, 0x01,          /* Usage Page (Generic Desktop)             */
  49:Descriptors.c **** 	0x09, 0x02,          /* Usage (Mouse)                            */
  50:Descriptors.c **** 	0xA1, 0x01,          /* Collection (Application)                 */
  51:Descriptors.c **** 	0x09, 0x01,          /*   Usage (Pointer)                        */
  52:Descriptors.c **** 	0xA1, 0x00,          /*   Collection (Application)               */
  53:Descriptors.c **** 	0x95, 0x03,          /*     Report Count (3)                     */
  54:Descriptors.c **** 	0x75, 0x01,          /*     Report Size (1)                      */
  55:Descriptors.c **** 	0x05, 0x09,          /*     Usage Page (Button)                  */
  56:Descriptors.c **** 	0x19, 0x01,          /*     Usage Minimum (Button 1)             */
  57:Descriptors.c **** 	0x29, 0x03,          /*     Usage Maximum (Button 3)             */
  58:Descriptors.c **** 	0x15, 0x00,          /*     Logical Minimum (0)                  */
  59:Descriptors.c **** 	0x25, 0x01,          /*     Logical Maximum (1)                  */
  60:Descriptors.c **** 	0x81, 0x02,          /*     Input (Data, Variable, Absolute)     */
  61:Descriptors.c **** 	0x95, 0x01,          /*     Report Count (1)                     */
  62:Descriptors.c **** 	0x75, 0x05,          /*     Report Size (5)                      */
  63:Descriptors.c **** 	0x81, 0x01,          /*     Input (Constant)                     */
  64:Descriptors.c **** 	0x75, 0x08,          /*     Report Size (8)                      */
  65:Descriptors.c **** 	0x95, 0x02,          /*     Report Count (2)                     */
  66:Descriptors.c **** 	0x05, 0x01,          /*     Usage Page (Generic Desktop Control) */
  67:Descriptors.c **** 	0x09, 0x30,          /*     Usage X                              */
  68:Descriptors.c **** 	0x09, 0x31,          /*     Usage Y                              */
  69:Descriptors.c **** 	0x15, 0x81,          /*     Logical Minimum (-127)               */
  70:Descriptors.c **** 	0x25, 0x7F,          /*     Logical Maximum (127)                */
  71:Descriptors.c **** 	0x81, 0x06,          /*     Input (Data, Variable, Relative)     */
  72:Descriptors.c **** 	0x75, 0x08,          /*     Report Size (8)                      */
  73:Descriptors.c **** 	0x95, 0x01,          /*     Report Count (1)                     */
  74:Descriptors.c **** 	0x09, 0x38,          /*     Usage Wheel                          */
  75:Descriptors.c **** 	0x81, 0x06,          /*     Input (Data, Variable, Relative)     */
  76:Descriptors.c **** 	0xC0,                /*   End Collection                         */
  77:Descriptors.c **** 	0xC0                 /* End Collection                           */
  78:Descriptors.c **** };
  79:Descriptors.c **** 
  80:Descriptors.c **** /** Device descriptor structure. This descriptor, located in FLASH memory, describes the overall
  81:Descriptors.c ****  *  device characteristics, including the supported USB version, control endpoint size and the
  82:Descriptors.c ****  *  number of device configurations. The descriptor is read out by the USB host when the enumeratio
  83:Descriptors.c ****  *  process begins.
  84:Descriptors.c ****  */
  85:Descriptors.c **** const USB_Descriptor_Device_t PROGMEM DeviceDescriptor =
  86:Descriptors.c **** {
  87:Descriptors.c **** 	.Header                 = {.Size = sizeof(USB_Descriptor_Device_t), .Type = DTYPE_Device},
  88:Descriptors.c **** 		
  89:Descriptors.c **** 	.USBSpecification       = VERSION_BCD(01.10),
  90:Descriptors.c **** 	.Class                  = 0x00,
  91:Descriptors.c **** 	.SubClass               = 0x00,
  92:Descriptors.c **** 	.Protocol               = 0x00,
  93:Descriptors.c **** 				
  94:Descriptors.c **** 	.Endpoint0Size          = FIXED_CONTROL_ENDPOINT_SIZE,
  95:Descriptors.c **** 		
  96:Descriptors.c **** 	.VendorID               = VENDOR_ID,
  97:Descriptors.c **** 	.ProductID              = PRODUCT_ID,
  98:Descriptors.c **** 	.ReleaseNumber          = RELEASE_NO,
  99:Descriptors.c **** 		
 100:Descriptors.c **** 	.ManufacturerStrIndex   = 0x01,
 101:Descriptors.c **** 	.ProductStrIndex        = 0x02,
 102:Descriptors.c **** 	.SerialNumStrIndex      = 0x03,
 103:Descriptors.c **** 		
 104:Descriptors.c **** 	.NumberOfConfigurations = FIXED_NUM_CONFIGURATIONS
 105:Descriptors.c **** };
 106:Descriptors.c **** 
 107:Descriptors.c **** /** Configuration descriptor structure. This descriptor, located in FLASH memory, describes the usa
 108:Descriptors.c ****  *  of the device in one of its supported configurations, including information about any device in
 109:Descriptors.c ****  *  and endpoints. The descriptor is read out by the USB host during the enumeration process when s
 110:Descriptors.c ****  *  a configuration so that the host may correctly communicate with the USB device.
 111:Descriptors.c ****  */
 112:Descriptors.c **** const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor =
 113:Descriptors.c **** {
 114:Descriptors.c **** 	.Config = 
 115:Descriptors.c **** 		{
 116:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Configuration_Header_t), .Type = DTYPE_
 117:Descriptors.c **** 
 118:Descriptors.c **** 			.TotalConfigurationSize = sizeof(USB_Descriptor_Configuration_t),
 119:Descriptors.c **** 		#ifdef USE_TWO_INTERFACES
 120:Descriptors.c **** 			.TotalInterfaces        = 2,
 121:Descriptors.c **** 		#else
 122:Descriptors.c **** 			.TotalInterfaces        = 1,
 123:Descriptors.c **** 		#endif
 124:Descriptors.c **** 				
 125:Descriptors.c **** 			.ConfigurationNumber    = 1,
 126:Descriptors.c **** 			.ConfigurationStrIndex  = NO_DESCRIPTOR,
 127:Descriptors.c **** 				
 128:Descriptors.c **** 			.ConfigAttributes       = CONFIG_ATTRIBUTES,
 129:Descriptors.c **** 			
 130:Descriptors.c **** 			.MaxPowerConsumption    = USB_CONFIG_POWER_MA(MAX_POWER)
 131:Descriptors.c **** 		},
 132:Descriptors.c **** 		
 133:Descriptors.c **** 	.HID_Second_Interface = 
 134:Descriptors.c **** 		{
 135:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 136:Descriptors.c **** 
 137:Descriptors.c **** 			.InterfaceNumber        = 0x00,
 138:Descriptors.c **** 			.AlternateSetting       = 0x00,
 139:Descriptors.c **** 			
 140:Descriptors.c **** 			.TotalEndpoints         = 1,
 141:Descriptors.c **** 				
 142:Descriptors.c **** 			.Class                  = 0x03,
 143:Descriptors.c **** 			.SubClass               = 0x01,
 144:Descriptors.c **** 			.Protocol               = HID_BOOT_MOUSE_PROTOCOL,
 145:Descriptors.c **** 				
 146:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 147:Descriptors.c **** 		},
 148:Descriptors.c **** 
 149:Descriptors.c **** 	.HID_Second_MouseHID = 
 150:Descriptors.c **** 		{
 151:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_HID_Descriptor_t), .Type = DTYPE_HID},
 152:Descriptors.c **** 
 153:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 154:Descriptors.c **** 			.CountryCode            = 0x00,
 155:Descriptors.c **** 			.TotalReportDescriptors = 1,
 156:Descriptors.c **** 			.HIDReportType          = DTYPE_Report,
 157:Descriptors.c **** 			.HIDReportLength        = sizeof(MouseReport)
 158:Descriptors.c **** 		},
 159:Descriptors.c **** 
 160:Descriptors.c **** 	.HID_Second_ReportINEndpoint = 
 161:Descriptors.c **** 		{
 162:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 163:Descriptors.c **** 
 164:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | MOUSE_EPNUM),
 165:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 166:Descriptors.c **** 			.EndpointSize           = MOUSE_EPSIZE,
 167:Descriptors.c **** 			.PollingIntervalMS      = POLLING_INTERVAL
 168:Descriptors.c **** 		}
 169:Descriptors.c **** #ifdef USE_TWO_INTERFACES
 170:Descriptors.c **** 	,
 171:Descriptors.c **** 	.HID_Interface = 
 172:Descriptors.c **** 		{
 173:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Interface_t), .Type = DTYPE_Interface},
 174:Descriptors.c **** 
 175:Descriptors.c **** 			.InterfaceNumber        = 0x01,
 176:Descriptors.c **** 			.AlternateSetting       = 0x00,
 177:Descriptors.c **** 			
 178:Descriptors.c **** 			.TotalEndpoints         = 1,
 179:Descriptors.c **** 				
 180:Descriptors.c **** 			.Class                  = 0x03,
 181:Descriptors.c **** 			.SubClass               = 0x00,
 182:Descriptors.c **** 			.Protocol               = HID_NON_BOOT_PROTOCOL,
 183:Descriptors.c **** 				
 184:Descriptors.c **** 			.InterfaceStrIndex      = NO_DESCRIPTOR
 185:Descriptors.c **** 		},
 186:Descriptors.c **** 
 187:Descriptors.c **** 	.HID_MouseHID = 
 188:Descriptors.c **** 		{
 189:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_HID_Descriptor_t), .Type = DTYPE_HID},
 190:Descriptors.c **** 
 191:Descriptors.c **** 			.HIDSpec                = VERSION_BCD(01.11),
 192:Descriptors.c **** 			.CountryCode            = 0x00,
 193:Descriptors.c **** 			.TotalReportDescriptors = 1,
 194:Descriptors.c **** 			.HIDReportType          = DTYPE_Report,
 195:Descriptors.c **** 			.HIDReportLength        = FAKE_DESCRIPTOR_LENGTH
 196:Descriptors.c **** 		},
 197:Descriptors.c **** 
 198:Descriptors.c **** 	.HID_ReportINEndpoint = 
 199:Descriptors.c **** 		{
 200:Descriptors.c **** 			.Header                 = {.Size = sizeof(USB_Descriptor_Endpoint_t), .Type = DTYPE_Endpoint},
 201:Descriptors.c **** 
 202:Descriptors.c **** 			.EndpointAddress        = (ENDPOINT_DESCRIPTOR_DIR_IN | FAKE_EPNUM),
 203:Descriptors.c **** 			.Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
 204:Descriptors.c **** 			.EndpointSize           = FAKE_EPSIZE,
 205:Descriptors.c **** 			.PollingIntervalMS      = POLLING_INTERVAL
 206:Descriptors.c **** 		}
 207:Descriptors.c **** #endif
 208:Descriptors.c **** };
 209:Descriptors.c **** 
 210:Descriptors.c **** /** Language descriptor structure. This descriptor, located in FLASH memory, is returned when the h
 211:Descriptors.c ****  *  the string descriptor with index 0 (the first index). It is actually an array of 16-bit integer
 212:Descriptors.c ****  *  via the language ID table available at USB.org what languages the device supports for its strin
 213:Descriptors.c ****  */
 214:Descriptors.c **** const USB_Descriptor_String_t PROGMEM LanguageString =
 215:Descriptors.c **** {
 216:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(1), .Type = DTYPE_String},
 217:Descriptors.c **** 		
 218:Descriptors.c **** 	.UnicodeString          = {LANGUAGE_ID_ENG}
 219:Descriptors.c **** };
 220:Descriptors.c **** 
 221:Descriptors.c **** /** Manufacturer descriptor string. This is a Unicode string containing the manufacturer's details 
 222:Descriptors.c ****  *  form, and is read out upon request by the host when the appropriate string ID is requested, lis
 223:Descriptors.c ****  *  Descriptor.
 224:Descriptors.c ****  */
 225:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ManufacturerString =
 226:Descriptors.c **** {
 227:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(7), .Type = DTYPE_String},
 228:Descriptors.c **** 		
 229:Descriptors.c **** 	.UnicodeString          = L"Arduino"
 230:Descriptors.c **** };
 231:Descriptors.c **** 
 232:Descriptors.c **** /** Product descriptor string. This is a Unicode string containing the product's details in human r
 233:Descriptors.c ****  *  and is read out upon request by the host when the appropriate string ID is requested, listed in
 234:Descriptors.c ****  *  Descriptor.
 235:Descriptors.c ****  */
 236:Descriptors.c **** const USB_Descriptor_String_t PROGMEM ProductString =
 237:Descriptors.c **** {
 238:Descriptors.c **** 	.Header                 = {.Size = USB_STRING_LEN(PRODUCT_STR_LEN), .Type = DTYPE_String},
 239:Descriptors.c **** 		
 240:Descriptors.c **** 	.UnicodeString          = PRODUCT_STR
 241:Descriptors.c **** };
 242:Descriptors.c **** 
 243:Descriptors.c **** /** This function is called by the library when in device mode, and must be overridden (see library
 244:Descriptors.c ****  *  documentation) by the application code so that the address and size of a requested descriptor c
 245:Descriptors.c ****  *  to the USB library. When the device receives a Get Descriptor request on the control endpoint, 
 246:Descriptors.c ****  *  is called so that the descriptor details can be passed back and the appropriate descriptor sent
 247:Descriptors.c ****  *  USB host.
 248:Descriptors.c ****  */
 249:Descriptors.c **** uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
 250:Descriptors.c ****                                     const uint8_t wIndex,
 251:Descriptors.c ****                                     void** const DescriptorAddress)
 252:Descriptors.c **** {
  16               		.loc 1 252 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 253:Descriptors.c **** 	const uint8_t  DescriptorType   = (wValue >> 8);
 254:Descriptors.c **** 	const uint8_t  DescriptorNumber = (wValue & 0xFF);
 255:Descriptors.c **** 
 256:Descriptors.c **** 	void*    Address = NULL;
 257:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 258:Descriptors.c **** 
 259:Descriptors.c **** 	switch (DescriptorType)
  23               		.loc 1 259 0
  24 0000 292F      		mov r18,r25
  25 0002 3327      		clr r19
  26 0004 2330      		cpi r18,3
  27 0006 3105      		cpc r19,__zero_reg__
  28 0008 01F0      		breq .L3
  29 000a 00F4      		brsh .L4
  30 000c 2130      		cpi r18,1
  31 000e 3105      		cpc r19,__zero_reg__
  32 0010 01F0      		breq .L5
  33 0012 2230      		cpi r18,2
  34 0014 3105      		cpc r19,__zero_reg__
  35 0016 01F4      		brne .L14
  36               	.LVL1:
 260:Descriptors.c **** 	{
 261:Descriptors.c **** 		case DTYPE_Device:
 262:Descriptors.c **** 			Address = (void*)&DeviceDescriptor;
 263:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
 264:Descriptors.c **** 			break;
 265:Descriptors.c **** 		case DTYPE_Configuration:
 266:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor;
 267:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  37               		.loc 1 267 0
  38 0018 8BE3      		ldi r24,lo8(59)
  39 001a 90E0      		ldi r25,0
  40               	.LVL2:
 266:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Configuration_t);
  41               		.loc 1 266 0
  42 001c 20E0      		ldi r18,lo8(ConfigurationDescriptor)
  43 001e 30E0      		ldi r19,hi8(ConfigurationDescriptor)
 268:Descriptors.c **** 			break;
  44               		.loc 1 268 0
  45 0020 00C0      		rjmp .L2
  46               	.LVL3:
  47               	.L4:
 259:Descriptors.c **** 	{
  48               		.loc 1 259 0
  49 0022 2132      		cpi r18,33
  50 0024 3105      		cpc r19,__zero_reg__
  51 0026 01F0      		breq .L7
  52 0028 2232      		cpi r18,34
  53 002a 3105      		cpc r19,__zero_reg__
  54 002c 01F4      		brne .L14
  55               	.LVL4:
 269:Descriptors.c **** 		case DTYPE_String:
 270:Descriptors.c **** 			switch (DescriptorNumber)
 271:Descriptors.c **** 			{
 272:Descriptors.c **** 				case 0x00:
 273:Descriptors.c **** 					Address = (void*)&LanguageString;
 274:Descriptors.c **** 					Size    = pgm_read_byte(&LanguageString.Header.Size);
 275:Descriptors.c **** 					break;
 276:Descriptors.c **** 				case 0x01:
 277:Descriptors.c **** 					Address = (void*)&ManufacturerString;
 278:Descriptors.c **** 					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 279:Descriptors.c **** 					break;
 280:Descriptors.c **** 				case 0x02:
 281:Descriptors.c **** 					Address = (void*)&ProductString;
 282:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 283:Descriptors.c **** 					break;
 284:Descriptors.c **** 			}
 285:Descriptors.c **** 			
 286:Descriptors.c **** 			break;
 287:Descriptors.c **** 		case DTYPE_HID: 
 288:Descriptors.c **** 			Address = (void*)&ConfigurationDescriptor.HID_MouseHID;
 289:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 290:Descriptors.c **** 			break;
 291:Descriptors.c **** 		case DTYPE_Report: 
 292:Descriptors.c **** 			Address = (void*)&MouseReport;
 293:Descriptors.c **** 			Size    = sizeof(MouseReport);
  56               		.loc 1 293 0
  57 002e 8AE3      		ldi r24,lo8(58)
  58 0030 90E0      		ldi r25,0
  59               	.LVL5:
 292:Descriptors.c **** 			Size    = sizeof(MouseReport);
  60               		.loc 1 292 0
  61 0032 20E0      		ldi r18,lo8(MouseReport)
  62 0034 30E0      		ldi r19,hi8(MouseReport)
 294:Descriptors.c **** 			break;
  63               		.loc 1 294 0
  64 0036 00C0      		rjmp .L2
  65               	.LVL6:
  66               	.L5:
 263:Descriptors.c **** 			break;
  67               		.loc 1 263 0
  68 0038 82E1      		ldi r24,lo8(18)
  69 003a 90E0      		ldi r25,0
  70               	.LVL7:
 262:Descriptors.c **** 			Size    = sizeof(USB_Descriptor_Device_t);
  71               		.loc 1 262 0
  72 003c 20E0      		ldi r18,lo8(DeviceDescriptor)
  73 003e 30E0      		ldi r19,hi8(DeviceDescriptor)
  74 0040 00C0      		rjmp .L2
  75               	.LVL8:
  76               	.L3:
 270:Descriptors.c **** 			{
  77               		.loc 1 270 0
  78 0042 9927      		clr r25
  79               	.LVL9:
  80 0044 8130      		cpi r24,1
  81 0046 9105      		cpc r25,__zero_reg__
  82 0048 01F0      		breq .L9
  83 004a 00F0      		brlo .L10
  84 004c 0297      		sbiw r24,2
  85 004e 01F4      		brne .L14
  86               	.LVL10:
  87               	.LBB2:
 282:Descriptors.c **** 					break;
  88               		.loc 1 282 0
  89 0050 E0E0      		ldi r30,lo8(ProductString)
  90 0052 F0E0      		ldi r31,hi8(ProductString)
  91 0054 00C0      		rjmp .L15
  92               	.LVL11:
  93               	.L10:
  94               	.LBE2:
  95               	.LBB3:
 274:Descriptors.c **** 					break;
  96               		.loc 1 274 0
  97 0056 E0E0      		ldi r30,lo8(LanguageString)
  98 0058 F0E0      		ldi r31,hi8(LanguageString)
  99 005a 00C0      		rjmp .L15
 100               	.LVL12:
 101               	.L9:
 102               	.LBE3:
 103               	.LBB4:
 278:Descriptors.c **** 					break;
 104               		.loc 1 278 0
 105 005c E0E0      		ldi r30,lo8(ManufacturerString)
 106 005e F0E0      		ldi r31,hi8(ManufacturerString)
 107               	.LVL13:
 108               	.L15:
 109               	.LBE4:
 110               	.LBB5:
 282:Descriptors.c **** 					break;
 111               		.loc 1 282 0
 112               	/* #APP */
 113               	 ;  282 "Descriptors.c" 1
 114 0060 8491      		lpm r24, Z
 115               		
 116               	 ;  0 "" 2
 117               	.LVL14:
 118               	/* #NOAPP */
 119               	.LBE5:
 120 0062 90E0      		ldi r25,0
 121               	.LVL15:
 281:Descriptors.c **** 					Size    = pgm_read_byte(&ProductString.Header.Size);
 122               		.loc 1 281 0
 123 0064 9F01      		movw r18,r30
 283:Descriptors.c **** 			}
 124               		.loc 1 283 0
 125 0066 00C0      		rjmp .L2
 126               	.LVL16:
 127               	.L7:
 289:Descriptors.c **** 			break;
 128               		.loc 1 289 0
 129 0068 89E0      		ldi r24,lo8(9)
 130 006a 90E0      		ldi r25,0
 131               	.LVL17:
 288:Descriptors.c **** 			Size    = sizeof(USB_HID_Descriptor_t);
 132               		.loc 1 288 0
 133 006c 20E0      		ldi r18,lo8(ConfigurationDescriptor+18)
 134 006e 30E0      		ldi r19,hi8(ConfigurationDescriptor+18)
 135               	.LVL18:
 290:Descriptors.c **** 		case DTYPE_Report: 
 136               		.loc 1 290 0
 137 0070 00C0      		rjmp .L2
 138               	.LVL19:
 139               	.L14:
 257:Descriptors.c **** 
 140               		.loc 1 257 0
 141 0072 80E0      		ldi r24,0
 142 0074 90E0      		ldi r25,0
 256:Descriptors.c **** 	uint16_t Size    = NO_DESCRIPTOR;
 143               		.loc 1 256 0
 144 0076 20E0      		ldi r18,0
 145 0078 30E0      		ldi r19,0
 146               	.LVL20:
 147               	.L2:
 295:Descriptors.c **** 	}
 296:Descriptors.c **** 	
 297:Descriptors.c **** 	*DescriptorAddress = Address;		
 148               		.loc 1 297 0
 149 007a FA01      		movw r30,r20
 150 007c 3183      		std Z+1,r19
 151 007e 2083      		st Z,r18
 298:Descriptors.c **** 	return Size;
 299:Descriptors.c **** }
 152               		.loc 1 299 0
 153 0080 0895      		ret
 154               		.cfi_endproc
 155               	.LFE66:
 157               	.global	ProductString
 158               		.section	.progmem.data,"a",@progbits
 161               	ProductString:
 162 0000 1A        		.byte	26
 163 0001 03        		.byte	3
 164 0002 4700      		.string	"G"
 165 0004 3500      		.string	"5"
 166 0006 3000      		.string	"0"
 167 0008 3200      		.string	"2"
 168 000a 2000      		.string	" "
 169 000c 4800      		.string	"H"
 170 000e 4500      		.string	"E"
 171 0010 5200      		.string	"R"
 172 0012 4F00      		.string	"O"
 173 0014 2000      		.string	" "
 174 0016 5300      		.string	"S"
 175 0018 4500      		.string	"E"
 176 001a 00        		.string	""
 177 001b 00        		.string	""
 178               	.global	ManufacturerString
 181               	ManufacturerString:
 182 001c 10        		.byte	16
 183 001d 03        		.byte	3
 184 001e 4100      		.string	"A"
 185 0020 7200      		.string	"r"
 186 0022 6400      		.string	"d"
 187 0024 7500      		.string	"u"
 188 0026 6900      		.string	"i"
 189 0028 6E00      		.string	"n"
 190 002a 6F00      		.string	"o"
 191 002c 00        		.string	""
 192 002d 00        		.string	""
 193               	.global	LanguageString
 196               	LanguageString:
 197 002e 04        		.byte	4
 198 002f 03        		.byte	3
 199 0030 0904      		.word	1033
 200               	.global	ConfigurationDescriptor
 203               	ConfigurationDescriptor:
 204 0032 09        		.byte	9
 205 0033 02        		.byte	2
 206 0034 3B00      		.word	59
 207 0036 02        		.byte	2
 208 0037 01        		.byte	1
 209 0038 00        		.byte	0
 210 0039 A0        		.byte	-96
 211 003a 96        		.byte	-106
 212 003b 09        		.byte	9
 213 003c 04        		.byte	4
 214 003d 01        		.byte	1
 215 003e 00        		.byte	0
 216 003f 01        		.byte	1
 217 0040 03        		.byte	3
 218 0041 00        		.byte	0
 219 0042 00        		.byte	0
 220 0043 00        		.byte	0
 221 0044 09        		.byte	9
 222 0045 21        		.byte	33
 223 0046 1101      		.word	273
 224 0048 00        		.byte	0
 225 0049 01        		.byte	1
 226 004a 22        		.byte	34
 227 004b 9700      		.word	151
 228 004d 07        		.byte	7
 229 004e 05        		.byte	5
 230 004f 82        		.byte	-126
 231 0050 03        		.byte	3
 232 0051 1400      		.word	20
 233 0053 01        		.byte	1
 234 0054 09        		.byte	9
 235 0055 04        		.byte	4
 236 0056 00        		.byte	0
 237 0057 00        		.byte	0
 238 0058 01        		.byte	1
 239 0059 03        		.byte	3
 240 005a 01        		.byte	1
 241 005b 02        		.byte	2
 242 005c 00        		.byte	0
 243 005d 09        		.byte	9
 244 005e 21        		.byte	33
 245 005f 1101      		.word	273
 246 0061 00        		.byte	0
 247 0062 01        		.byte	1
 248 0063 22        		.byte	34
 249 0064 3A00      		.word	58
 250 0066 07        		.byte	7
 251 0067 05        		.byte	5
 252 0068 81        		.byte	-127
 253 0069 03        		.byte	3
 254 006a 0800      		.word	8
 255 006c 01        		.byte	1
 256               	.global	DeviceDescriptor
 259               	DeviceDescriptor:
 260 006d 12        		.byte	18
 261 006e 01        		.byte	1
 262 006f 1001      		.word	272
 263 0071 00        		.byte	0
 264 0072 00        		.byte	0
 265 0073 00        		.byte	0
 266 0074 08        		.byte	8
 267 0075 6D04      		.word	1133
 268 0077 8BC0      		.word	-16245
 269 0079 0327      		.word	9987
 270 007b 01        		.byte	1
 271 007c 02        		.byte	2
 272 007d 03        		.byte	3
 273 007e 01        		.byte	1
 274               	.global	MouseReport
 277               	MouseReport:
 278 007f 05        		.byte	5
 279 0080 01        		.byte	1
 280 0081 09        		.byte	9
 281 0082 02        		.byte	2
 282 0083 A1        		.byte	-95
 283 0084 01        		.byte	1
 284 0085 09        		.byte	9
 285 0086 01        		.byte	1
 286 0087 A1        		.byte	-95
 287 0088 00        		.byte	0
 288 0089 95        		.byte	-107
 289 008a 03        		.byte	3
 290 008b 75        		.byte	117
 291 008c 01        		.byte	1
 292 008d 05        		.byte	5
 293 008e 09        		.byte	9
 294 008f 19        		.byte	25
 295 0090 01        		.byte	1
 296 0091 29        		.byte	41
 297 0092 03        		.byte	3
 298 0093 15        		.byte	21
 299 0094 00        		.byte	0
 300 0095 25        		.byte	37
 301 0096 01        		.byte	1
 302 0097 81        		.byte	-127
 303 0098 02        		.byte	2
 304 0099 95        		.byte	-107
 305 009a 01        		.byte	1
 306 009b 75        		.byte	117
 307 009c 05        		.byte	5
 308 009d 81        		.byte	-127
 309 009e 01        		.byte	1
 310 009f 75        		.byte	117
 311 00a0 08        		.byte	8
 312 00a1 95        		.byte	-107
 313 00a2 02        		.byte	2
 314 00a3 05        		.byte	5
 315 00a4 01        		.byte	1
 316 00a5 09        		.byte	9
 317 00a6 30        		.byte	48
 318 00a7 09        		.byte	9
 319 00a8 31        		.byte	49
 320 00a9 15        		.byte	21
 321 00aa 81        		.byte	-127
 322 00ab 25        		.byte	37
 323 00ac 7F        		.byte	127
 324 00ad 81        		.byte	-127
 325 00ae 06        		.byte	6
 326 00af 75        		.byte	117
 327 00b0 08        		.byte	8
 328 00b1 95        		.byte	-107
 329 00b2 01        		.byte	1
 330 00b3 09        		.byte	9
 331 00b4 38        		.byte	56
 332 00b5 81        		.byte	-127
 333 00b6 06        		.byte	6
 334 00b7 C0        		.byte	-64
 335 00b8 C0        		.byte	-64
 336               		.text
 337               	.Letext0:
 338               		.file 2 "/usr/lib/avr/include/stdint.h"
 339               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 340               		.file 4 "../../LUFA/Drivers/USB/HighLevel/../LowLevel/../HighLevel/StdDescriptors.h"
 341               		.file 5 "../../LUFA/Drivers/USB/Class/Device/../Common/HID.h"
 342               		.file 6 "Descriptors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Descriptors.c
     /tmp/ccOTxlET.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccOTxlET.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccOTxlET.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccOTxlET.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccOTxlET.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccOTxlET.s:13     .text.CALLBACK_USB_GetDescriptor:0000000000000000 CALLBACK_USB_GetDescriptor
     /tmp/ccOTxlET.s:203    .progmem.data:0000000000000032 ConfigurationDescriptor
     /tmp/ccOTxlET.s:277    .progmem.data:000000000000007f MouseReport
     /tmp/ccOTxlET.s:259    .progmem.data:000000000000006d DeviceDescriptor
     /tmp/ccOTxlET.s:161    .progmem.data:0000000000000000 ProductString
     /tmp/ccOTxlET.s:196    .progmem.data:000000000000002e LanguageString
     /tmp/ccOTxlET.s:181    .progmem.data:000000000000001c ManufacturerString

NO UNDEFINED SYMBOLS
